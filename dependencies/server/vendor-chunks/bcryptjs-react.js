/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bcryptjs-react";
exports.ids = ["vendor-chunks/bcryptjs-react"];
exports.modules = {

/***/ "(action-browser)/./node_modules/bcryptjs-react/dist/bcrypt.js":
/*!****************************************************!*\
  !*** ./node_modules/bcryptjs-react/dist/bcrypt.js ***!
  \****************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n Copyright (c) 2012 Nevins Bartolomeo <nevins.bartolomeo@gmail.com>\n Copyright (c) 2012 Shane Girish <shaneGirish@gmail.com>\n Copyright (c) 2014 Daniel Wirtz <dcode@dcode.io>\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n 1. Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n 3. The name of the author may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @license bcrypt.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\n * Released under the Apache License, Version 2.0\n * see: https://github.com/dcodeIO/bcrypt.js for details\n */\n(function(global, factory) {\n\n    /* AMD */ if (true)\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    /* CommonJS */ else {}\n\n}(this, function() {\n    \"use strict\";\n\n    /**\n     * bcrypt namespace.\n     * @type {Object.<string,*>}\n     */\n    var bcrypt = {};\n\n    /**\n     * The random implementation to use as a fallback.\n     * @type {?function(number):!Array.<number>}\n     * @inner\n     */\n    var randomFallback = null;\n\n    /**\n     * Generates cryptographically secure random bytes.\n     * @function\n     * @param {number} len Bytes length\n     * @returns {!Array.<number>} Random bytes\n     * @throws {Error} If no random implementation is available\n     * @inner\n     */\n    function random(len) {\n\n        /* WCA */ try {\n            var a; (self['crypto']||self['msCrypto'])['getRandomValues'](a = new Uint32Array(len));\n            return Array.prototype.slice.call(a);\n        } catch (e) {}\n        /* fallback */ if (!randomFallback)\n            throw Error(\"Neither WebCryptoAPI nor a crypto module is available. Use bcrypt.setRandomFallback to set an alternative\");\n        return randomFallback(len);\n    }\n\n    // Test if any secure randomness source is available\n    var randomAvailable = false;\n    try {\n        random(1);\n        randomAvailable = true;\n    } catch (e) {}\n\n    // Default fallback, if any\n    randomFallback = null;\n    /**\n     * Sets the pseudo random number generator to use as a fallback if neither node's `crypto` module nor the Web Crypto\n     *  API is available. Please note: It is highly important that the PRNG used is cryptographically secure and that it\n     *  is seeded properly!\n     * @param {?function(number):!Array.<number>} random Function taking the number of bytes to generate as its\n     *  sole argument, returning the corresponding array of cryptographically secure random byte values.\n     * @see http://nodejs.org/api/crypto.html\n     * @see http://www.w3.org/TR/WebCryptoAPI/\n     */\n    bcrypt.setRandomFallback = function(random) {\n        randomFallback = random;\n    };\n\n    /**\n     * Synchronously generates a salt.\n     * @param {number=} rounds Number of rounds to use, defaults to 10 if omitted\n     * @param {number=} seed_length Not supported.\n     * @returns {string} Resulting salt\n     * @throws {Error} If a random fallback is required but not set\n     */\n    bcrypt.genSaltSync = function(rounds, seed_length) {\n        rounds = rounds || GENSALT_DEFAULT_LOG2_ROUNDS;\n        if (typeof rounds !== 'number')\n            throw Error(\"Illegal arguments: \"+(typeof rounds)+\", \"+(typeof seed_length));\n        if (rounds < 4)\n            rounds = 4;\n        else if (rounds > 31)\n            rounds = 31;\n        var salt = [];\n        salt.push(\"$2a$\");\n        if (rounds < 10)\n            salt.push(\"0\");\n        salt.push(rounds.toString());\n        salt.push('$');\n        salt.push(base64_encode(random(BCRYPT_SALT_LEN), BCRYPT_SALT_LEN)); // May throw\n        return salt.join('');\n    };\n\n    /**\n     * Asynchronously generates a salt.\n     * @param {(number|function(Error, string=))=} rounds Number of rounds to use, defaults to 10 if omitted\n     * @param {(number|function(Error, string=))=} seed_length Not supported.\n     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting salt\n     * @returns {!Promise} If `callback` has been omitted\n     * @throws {Error} If `callback` is present but not a function\n     */\n    bcrypt.genSalt = function(rounds, seed_length, callback) {\n        if (typeof seed_length === 'function')\n            callback = seed_length,\n            seed_length = undefined; // Not supported.\n        if (typeof rounds === 'function')\n            callback = rounds,\n            rounds = undefined;\n        if (typeof rounds === 'undefined')\n            rounds = GENSALT_DEFAULT_LOG2_ROUNDS;\n        else if (typeof rounds !== 'number')\n            throw Error(\"illegal arguments: \"+(typeof rounds));\n\n        function _async(callback) {\n            nextTick(function() { // Pretty thin, but salting is fast enough\n                try {\n                    callback(null, bcrypt.genSaltSync(rounds));\n                } catch (err) {\n                    callback(err);\n                }\n            });\n        }\n\n        if (callback) {\n            if (typeof callback !== 'function')\n                throw Error(\"Illegal callback: \"+typeof(callback));\n            _async(callback);\n        } else\n            return new Promise(function(resolve, reject) {\n                _async(function(err, res) {\n                    if (err) {\n                        reject(err);\n                        return;\n                    }\n                    resolve(res);\n                });\n            });\n    };\n\n    /**\n     * Synchronously generates a hash for the given string.\n     * @param {string} s String to hash\n     * @param {(number|string)=} salt Salt length to generate or salt to use, default to 10\n     * @returns {string} Resulting hash\n     */\n    bcrypt.hashSync = function(s, salt) {\n        if (typeof salt === 'undefined')\n            salt = GENSALT_DEFAULT_LOG2_ROUNDS;\n        if (typeof salt === 'number')\n            salt = bcrypt.genSaltSync(salt);\n        if (typeof s !== 'string' || typeof salt !== 'string')\n            throw Error(\"Illegal arguments: \"+(typeof s)+', '+(typeof salt));\n        return _hash(s, salt);\n    };\n\n    /**\n     * Asynchronously generates a hash for the given string.\n     * @param {string} s String to hash\n     * @param {number|string} salt Salt length to generate or salt to use\n     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash\n     * @param {function(number)=} progressCallback Callback successively called with the percentage of rounds completed\n     *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\n     * @returns {!Promise} If `callback` has been omitted\n     * @throws {Error} If `callback` is present but not a function\n     */\n    bcrypt.hash = function(s, salt, callback, progressCallback) {\n\n        function _async(callback) {\n            if (typeof s === 'string' && typeof salt === 'number')\n                bcrypt.genSalt(salt, function(err, salt) {\n                    _hash(s, salt, callback, progressCallback);\n                });\n            else if (typeof s === 'string' && typeof salt === 'string')\n                _hash(s, salt, callback, progressCallback);\n            else\n                nextTick(callback.bind(this, Error(\"Illegal arguments: \"+(typeof s)+', '+(typeof salt))));\n        }\n\n        if (callback) {\n            if (typeof callback !== 'function')\n                throw Error(\"Illegal callback: \"+typeof(callback));\n            _async(callback);\n        } else\n            return new Promise(function(resolve, reject) {\n                _async(function(err, res) {\n                    if (err) {\n                        reject(err);\n                        return;\n                    }\n                    resolve(res);\n                });\n            });\n    };\n\n    /**\n     * Compares two strings of the same length in constant time.\n     * @param {string} known Must be of the correct length\n     * @param {string} unknown Must be the same length as `known`\n     * @returns {boolean}\n     * @inner\n     */\n    function safeStringCompare(known, unknown) {\n        var diff = known.length ^ unknown.length;\n        for (var i = 0; i < known.length; ++i) {\n            diff |= known.charCodeAt(i) ^ unknown.charCodeAt(i);\n        }\n        return diff === 0;\n    }\n\n    /**\n     * Synchronously tests a string against a hash.\n     * @param {string} s String to compare\n     * @param {string} hash Hash to test against\n     * @returns {boolean} true if matching, otherwise false\n     * @throws {Error} If an argument is illegal\n     */\n    bcrypt.compareSync = function(s, hash) {\n        if (typeof s !== \"string\" || typeof hash !== \"string\")\n            throw Error(\"Illegal arguments: \"+(typeof s)+', '+(typeof hash));\n        if (hash.length !== 60)\n            return false;\n        return safeStringCompare(bcrypt.hashSync(s, hash.substr(0, hash.length-31)), hash);\n    };\n\n    /**\n     * Asynchronously compares the given data against the given hash.\n     * @param {string} s Data to compare\n     * @param {string} hash Data to be compared to\n     * @param {function(Error, boolean)=} callback Callback receiving the error, if any, otherwise the result\n     * @param {function(number)=} progressCallback Callback successively called with the percentage of rounds completed\n     *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\n     * @returns {!Promise} If `callback` has been omitted\n     * @throws {Error} If `callback` is present but not a function\n     */\n    bcrypt.compare = function(s, hash, callback, progressCallback) {\n\n        function _async(callback) {\n            if (typeof s !== \"string\" || typeof hash !== \"string\") {\n                nextTick(callback.bind(this, Error(\"Illegal arguments: \"+(typeof s)+', '+(typeof hash))));\n                return;\n            }\n            if (hash.length !== 60) {\n                nextTick(callback.bind(this, null, false));\n                return;\n            }\n            bcrypt.hash(s, hash.substr(0, 29), function(err, comp) {\n                if (err)\n                    callback(err);\n                else\n                    callback(null, safeStringCompare(comp, hash));\n            }, progressCallback);\n        }\n\n        if (callback) {\n            if (typeof callback !== 'function')\n                throw Error(\"Illegal callback: \"+typeof(callback));\n            _async(callback);\n        } else\n            return new Promise(function(resolve, reject) {\n                _async(function(err, res) {\n                    if (err) {\n                        reject(err);\n                        return;\n                    }\n                    resolve(res);\n                });\n            });\n    };\n\n    /**\n     * Gets the number of rounds used to encrypt the specified hash.\n     * @param {string} hash Hash to extract the used number of rounds from\n     * @returns {number} Number of rounds used\n     * @throws {Error} If `hash` is not a string\n     */\n    bcrypt.getRounds = function(hash) {\n        if (typeof hash !== \"string\")\n            throw Error(\"Illegal arguments: \"+(typeof hash));\n        return parseInt(hash.split(\"$\")[2], 10);\n    };\n\n    /**\n     * Gets the salt portion from a hash. Does not validate the hash.\n     * @param {string} hash Hash to extract the salt from\n     * @returns {string} Extracted salt part\n     * @throws {Error} If `hash` is not a string or otherwise invalid\n     */\n    bcrypt.getSalt = function(hash) {\n        if (typeof hash !== 'string')\n            throw Error(\"Illegal arguments: \"+(typeof hash));\n        if (hash.length !== 60)\n            throw Error(\"Illegal hash length: \"+hash.length+\" != 60\");\n        return hash.substring(0, 29);\n    };\n\n    /**\n     * Continues with the callback on the next tick.\n     * @function\n     * @param {function(...[*])} callback Callback to execute\n     * @inner\n     */\n    var nextTick = typeof process !== 'undefined' && process && typeof process.nextTick === 'function'\n        ? (typeof setImmediate === 'function' ? setImmediate : process.nextTick)\n        : setTimeout;\n\n    /** Calculates the byte length of a string encoded as UTF8. */\n    function utf8Length(string) {\n      var len = 0,\n          c = 0;\n      for (var i = 0; i < string.length; ++i) {\n          c = string.charCodeAt(i);\n          if (c < 128)\n              len += 1;\n          else if (c < 2048)\n              len += 2;\n          else if (\n            (c                        & 0xFC00) === 0xD800 &&\n            (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00\n          ) {\n              ++i;\n              len += 4;\n          } else\n              len += 3;\n      }\n      return len;\n    }\n\n    /** Converts a string to an array of UTF8 bytes. */\n    function utf8Array(string) {\n      var offset = 0,\n          c1, c2;\n      var buffer = new Array(utf8Length(string));\n      for (var i = 0, k = string.length; i < k; ++i) {\n          c1 = string.charCodeAt(i);\n          if (c1 < 128) {\n              buffer[offset++] = c1;\n          } else if (c1 < 2048) {\n              buffer[offset++] = c1 >> 6       | 192;\n              buffer[offset++] = c1       & 63 | 128;\n          } else if (\n            ( c1                             & 0xFC00) === 0xD800 &&\n            ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00\n          ) {\n              c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\n              ++i;\n              buffer[offset++] = c1 >> 18      | 240;\n              buffer[offset++] = c1 >> 12 & 63 | 128;\n              buffer[offset++] = c1 >> 6  & 63 | 128;\n              buffer[offset++] = c1       & 63 | 128;\n          } else {\n              buffer[offset++] = c1 >> 12      | 224;\n              buffer[offset++] = c1 >> 6  & 63 | 128;\n              buffer[offset++] = c1       & 63 | 128;\n          }\n      }\n      return buffer;\n    }\n\n    /**\n     * Converts a JavaScript string to UTF8 bytes.\n     * @function\n     * @param {string} str String\n     * @returns {!Array.<number>} UTF8 bytes\n     * @inner\n     */\n    var stringToBytes = utf8Array;\n\n    // A base64 implementation for the bcrypt algorithm. This is partly non-standard.\n\n    /**\n     * bcrypt's own non-standard base64 dictionary.\n     * @type {!Array.<string>}\n     * @const\n     * @inner\n     **/\n    var BASE64_CODE = \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".split('');\n\n    /**\n     * @type {!Array.<number>}\n     * @const\n     * @inner\n     **/\n    var BASE64_INDEX = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,\n        1, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1,\n        -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, -1, -1, -1, -1, -1, -1, 28, 29, 30,\n        31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, -1, -1, -1, -1, -1];\n\n    /**\n     * @type {!function(...number):string}\n     * @inner\n     */\n    var stringFromCharCode = String.fromCharCode;\n\n    /**\n     * Encodes a byte array to base64 with up to len bytes of input.\n     * @param {!Array.<number>} b Byte array\n     * @param {number} len Maximum input length\n     * @returns {string}\n     * @inner\n     */\n    function base64_encode(b, len) {\n        var off = 0,\n            rs = [],\n            c1, c2;\n        if (len <= 0 || len > b.length)\n            throw Error(\"Illegal len: \"+len);\n        while (off < len) {\n            c1 = b[off++] & 0xff;\n            rs.push(BASE64_CODE[(c1 >> 2) & 0x3f]);\n            c1 = (c1 & 0x03) << 4;\n            if (off >= len) {\n                rs.push(BASE64_CODE[c1 & 0x3f]);\n                break;\n            }\n            c2 = b[off++] & 0xff;\n            c1 |= (c2 >> 4) & 0x0f;\n            rs.push(BASE64_CODE[c1 & 0x3f]);\n            c1 = (c2 & 0x0f) << 2;\n            if (off >= len) {\n                rs.push(BASE64_CODE[c1 & 0x3f]);\n                break;\n            }\n            c2 = b[off++] & 0xff;\n            c1 |= (c2 >> 6) & 0x03;\n            rs.push(BASE64_CODE[c1 & 0x3f]);\n            rs.push(BASE64_CODE[c2 & 0x3f]);\n        }\n        return rs.join('');\n    }\n\n    /**\n     * Decodes a base64 encoded string to up to len bytes of output.\n     * @param {string} s String to decode\n     * @param {number} len Maximum output length\n     * @returns {!Array.<number>}\n     * @inner\n     */\n    function base64_decode(s, len) {\n        var off = 0,\n            slen = s.length,\n            olen = 0,\n            rs = [],\n            c1, c2, c3, c4, o, code;\n        if (len <= 0)\n            throw Error(\"Illegal len: \"+len);\n        while (off < slen - 1 && olen < len) {\n            code = s.charCodeAt(off++);\n            c1 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            code = s.charCodeAt(off++);\n            c2 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            if (c1 == -1 || c2 == -1)\n                break;\n            o = (c1 << 2) >>> 0;\n            o |= (c2 & 0x30) >> 4;\n            rs.push(stringFromCharCode(o));\n            if (++olen >= len || off >= slen)\n                break;\n            code = s.charCodeAt(off++);\n            c3 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            if (c3 == -1)\n                break;\n            o = ((c2 & 0x0f) << 4) >>> 0;\n            o |= (c3 & 0x3c) >> 2;\n            rs.push(stringFromCharCode(o));\n            if (++olen >= len || off >= slen)\n                break;\n            code = s.charCodeAt(off++);\n            c4 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            o = ((c3 & 0x03) << 6) >>> 0;\n            o |= c4;\n            rs.push(stringFromCharCode(o));\n            ++olen;\n        }\n        var res = [];\n        for (off = 0; off<olen; off++)\n            res.push(rs[off].charCodeAt(0));\n        return res;\n    }\n\n    Date.now = Date.now || function() { return +new Date; };\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var BCRYPT_SALT_LEN = 16;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var GENSALT_DEFAULT_LOG2_ROUNDS = 10;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var BLOWFISH_NUM_ROUNDS = 16;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var MAX_EXECUTION_TIME = 100;\n\n    /**\n     * @type {Array.<number>}\n     * @const\n     * @inner\n     */\n    var P_ORIG = [\n        0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822,\n        0x299f31d0, 0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377,\n        0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5,\n        0xb5470917, 0x9216d5d9, 0x8979fb1b\n    ];\n\n    /**\n     * @type {Array.<number>}\n     * @const\n     * @inner\n     */\n    var S_ORIG = [\n        0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed,\n        0x6a267e96, 0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7,\n        0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3,\n        0xf4933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee,\n        0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013, 0xc5d1b023,\n        0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e,\n        0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda,\n        0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,\n        0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af,\n        0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c55d, 0x741831f6,\n        0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381,\n        0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,\n        0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d,\n        0xe98575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5,\n        0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa4842004, 0x69c8f04a,\n        0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,\n        0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3, 0x6eef0b6c,\n        0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176,\n        0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3,\n        0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,\n        0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724,\n        0xd00a1248, 0xdb0fead3, 0x49f1c09b, 0x075372c9, 0x80991b7b,\n        0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd,\n        0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,\n        0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f,\n        0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd,\n        0x660f2807, 0x192e4bb3, 0xc0cba857, 0x45c8740f, 0xd20b5f39,\n        0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,\n        0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df,\n        0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760,\n        0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e,\n        0xdf1769db, 0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,\n        0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98,\n        0xfd2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565,\n        0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33, 0x62fb1341,\n        0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,\n        0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0,\n        0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64,\n        0x8888b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191,\n        0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,\n        0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0,\n        0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705,\n        0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5,\n        0xfb9d35cf, 0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,\n        0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af, 0x2464369b,\n        0xf009b91e, 0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f,\n        0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9, 0x11c81968,\n        0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,\n        0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5,\n        0x571be91f, 0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6,\n        0xff34052e, 0xc5855664, 0x53b02d5d, 0xa99f8fa1, 0x08ba4799,\n        0x6e85076a, 0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623,\n        0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266, 0xecaa8c71,\n        0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29,\n        0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6,\n        0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,\n        0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f,\n        0x3ebaefc9, 0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286,\n        0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c, 0x8e7d44ec,\n        0x5716f2b8, 0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,\n        0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113f9,\n        0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc,\n        0xc8b57634, 0x9af3dda7, 0xa9446146, 0x0fd0030e, 0xecc8c73e,\n        0xa4751e41, 0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,\n        0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf, 0x2cb81290,\n        0x24977c79, 0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd9930810,\n        0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6,\n        0x9f84cd87, 0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,\n        0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847,\n        0x3215d908, 0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451,\n        0x50940002, 0x133ae4dd, 0x71dff89e, 0x10314e55, 0x81ac77d6,\n        0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,\n        0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570,\n        0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa,\n        0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978,\n        0x9c10b36a, 0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4,\n        0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960, 0x5223a708,\n        0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883,\n        0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185,\n        0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,\n        0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830,\n        0xeb61bd96, 0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239,\n        0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7, 0x9cab5cab,\n        0xb2f3846e, 0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,\n        0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19,\n        0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77,\n        0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1,\n        0x7858ba99, 0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,\n        0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128, 0x58ebf2ef,\n        0x34c6ffea, 0xfe28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3,\n        0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15,\n        0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,\n        0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2,\n        0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492,\n        0x47848a0b, 0x5692b285, 0x095bbf00, 0xad19489d, 0x1462b174,\n        0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,\n        0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759,\n        0xcbee7460, 0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e,\n        0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc,\n        0x800bcadc, 0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9,\n        0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340, 0xc5c43465,\n        0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a,\n        0xe6e39f2b, 0xdb83adf7, 0xe93d5a68, 0x948140f7, 0xf64c261c,\n        0x94692934, 0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,\n        0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af, 0x1e39f62e,\n        0x97244546, 0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af,\n        0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0,\n        0x31cb8504, 0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,\n        0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb, 0x68dc1462,\n        0xd7486900, 0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c,\n        0xb58ce006, 0x7af4d6b6, 0xaace1e7c, 0xd3375fec, 0xce78a399,\n        0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,\n        0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74,\n        0xdd5b4332, 0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397,\n        0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7,\n        0xd096954b, 0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,\n        0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c, 0xfdf8e802,\n        0x04272f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22,\n        0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f, 0x404779a4,\n        0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,\n        0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2,\n        0x02e1329e, 0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1,\n        0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99, 0xde720c8c,\n        0x2da2f728, 0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,\n        0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0x0a476341,\n        0x992eff74, 0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8,\n        0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b,\n        0xdcd0e804, 0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,\n        0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3, 0xbb132f88,\n        0x515bad24, 0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979,\n        0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc,\n        0x782ef11c, 0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,\n        0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659,\n        0x0a121386, 0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f,\n        0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086, 0x60787bf8,\n        0x6003604d, 0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,\n        0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be,\n        0xbde8ae24, 0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2,\n        0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255,\n        0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,\n        0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c, 0xb90bace1,\n        0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09,\n        0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c, 0x4a99a025,\n        0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,\n        0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01,\n        0xa70683fa, 0xa002b5c4, 0x0de6d027, 0x9af88c27, 0x773f8641,\n        0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0, 0x006058aa,\n        0x30dc7d62, 0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,\n        0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76, 0x6f05e409,\n        0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9,\n        0x1ac15bb4, 0xd39eb8fc, 0xed545578, 0x08fca5b5, 0xd83d7cd3,\n        0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,\n        0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837, 0xd79a3234,\n        0x92638212, 0x670efa8e, 0x406000e0, 0x3a39ce37, 0xd3faf5cf,\n        0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742, 0xd3822740,\n        0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,\n        0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f,\n        0xbc946e79, 0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d,\n        0xd5730a1d, 0x4cd04dc6, 0x2939bbdb, 0xa9ba4650, 0xac9526e8,\n        0xbe5ee304, 0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,\n        0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4, 0x83c061ba,\n        0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1,\n        0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69,\n        0x77fa0a59, 0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,\n        0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a,\n        0x017da67d, 0xd1cf3ed6, 0x7c7d2d28, 0x1f9f25cf, 0xadf2b89b,\n        0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6, 0x47b0acfd,\n        0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,\n        0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4,\n        0x88f46dba, 0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2,\n        0x97271aec, 0xa93a072a, 0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb,\n        0x26dcf319, 0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb,\n        0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f, 0x4de81751,\n        0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce,\n        0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369,\n        0x6413e680, 0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,\n        0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae, 0x5bbef7dd,\n        0x1b588d40, 0xccd2017f, 0x6bb4e3bb, 0xdda26a7e, 0x3a59ff45,\n        0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb, 0x8d6612ae,\n        0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,\n        0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08,\n        0x4eb4e2cc, 0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d,\n        0x06b89fb4, 0xce6ea048, 0x6f3f3b82, 0x3520ab82, 0x011a1d4b,\n        0x277227f8, 0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,\n        0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9, 0xe01cc87e,\n        0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a,\n        0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c,\n        0xe0b12b4f, 0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,\n        0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525, 0xfae59361,\n        0xceb69ceb, 0xc2a86459, 0x12baa8d1, 0xb6c1075e, 0xe3056a0c,\n        0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b, 0x4c98a0be,\n        0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,\n        0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d,\n        0x9b992f2e, 0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891,\n        0xce6279cf, 0xcd3e7e6f, 0x1618b166, 0xfd2c1d05, 0x848fd2c5,\n        0xf6fb2299, 0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02,\n        0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc, 0xde966292,\n        0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a,\n        0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2,\n        0x35bdd2f6, 0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,\n        0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0, 0xba38209c,\n        0xf746ce76, 0x77afa1c5, 0x20756060, 0x85cbfe4e, 0x8ae88dd8,\n        0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c, 0x01c36ae4,\n        0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,\n        0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6\n    ];\n\n    /**\n     * @type {Array.<number>}\n     * @const\n     * @inner\n     */\n    var C_ORIG = [\n        0x4f727068, 0x65616e42, 0x65686f6c, 0x64657253, 0x63727944,\n        0x6f756274\n    ];\n\n    /**\n     * @param {Array.<number>} lr\n     * @param {number} off\n     * @param {Array.<number>} P\n     * @param {Array.<number>} S\n     * @returns {Array.<number>}\n     * @inner\n     */\n    function _encipher(lr, off, P, S) { // This is our bottleneck: 1714/1905 ticks / 90% - see profile.txt\n        var n,\n            l = lr[off],\n            r = lr[off + 1];\n\n        l ^= P[0];\n\n        /*\n        for (var i=0, k=BLOWFISH_NUM_ROUNDS-2; i<=k;)\n            // Feistel substitution on left word\n            n  = S[l >>> 24],\n            n += S[0x100 | ((l >> 16) & 0xff)],\n            n ^= S[0x200 | ((l >> 8) & 0xff)],\n            n += S[0x300 | (l & 0xff)],\n            r ^= n ^ P[++i],\n            // Feistel substitution on right word\n            n  = S[r >>> 24],\n            n += S[0x100 | ((r >> 16) & 0xff)],\n            n ^= S[0x200 | ((r >> 8) & 0xff)],\n            n += S[0x300 | (r & 0xff)],\n            l ^= n ^ P[++i];\n        */\n\n        //The following is an unrolled version of the above loop.\n        //Iteration 0\n        n  = S[l >>> 24];\n        n += S[0x100 | ((l >> 16) & 0xff)];\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\n        n += S[0x300 | (l & 0xff)];\n        r ^= n ^ P[1];\n        n  = S[r >>> 24];\n        n += S[0x100 | ((r >> 16) & 0xff)];\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\n        n += S[0x300 | (r & 0xff)];\n        l ^= n ^ P[2];\n        //Iteration 1\n        n  = S[l >>> 24];\n        n += S[0x100 | ((l >> 16) & 0xff)];\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\n        n += S[0x300 | (l & 0xff)];\n        r ^= n ^ P[3];\n        n  = S[r >>> 24];\n        n += S[0x100 | ((r >> 16) & 0xff)];\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\n        n += S[0x300 | (r & 0xff)];\n        l ^= n ^ P[4];\n        //Iteration 2\n        n  = S[l >>> 24];\n        n += S[0x100 | ((l >> 16) & 0xff)];\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\n        n += S[0x300 | (l & 0xff)];\n        r ^= n ^ P[5];\n        n  = S[r >>> 24];\n        n += S[0x100 | ((r >> 16) & 0xff)];\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\n        n += S[0x300 | (r & 0xff)];\n        l ^= n ^ P[6];\n        //Iteration 3\n        n  = S[l >>> 24];\n        n += S[0x100 | ((l >> 16) & 0xff)];\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\n        n += S[0x300 | (l & 0xff)];\n        r ^= n ^ P[7];\n        n  = S[r >>> 24];\n        n += S[0x100 | ((r >> 16) & 0xff)];\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\n        n += S[0x300 | (r & 0xff)];\n        l ^= n ^ P[8];\n        //Iteration 4\n        n  = S[l >>> 24];\n        n += S[0x100 | ((l >> 16) & 0xff)];\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\n        n += S[0x300 | (l & 0xff)];\n        r ^= n ^ P[9];\n        n  = S[r >>> 24];\n        n += S[0x100 | ((r >> 16) & 0xff)];\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\n        n += S[0x300 | (r & 0xff)];\n        l ^= n ^ P[10];\n        //Iteration 5\n        n  = S[l >>> 24];\n        n += S[0x100 | ((l >> 16) & 0xff)];\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\n        n += S[0x300 | (l & 0xff)];\n        r ^= n ^ P[11];\n        n  = S[r >>> 24];\n        n += S[0x100 | ((r >> 16) & 0xff)];\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\n        n += S[0x300 | (r & 0xff)];\n        l ^= n ^ P[12];\n        //Iteration 6\n        n  = S[l >>> 24];\n        n += S[0x100 | ((l >> 16) & 0xff)];\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\n        n += S[0x300 | (l & 0xff)];\n        r ^= n ^ P[13];\n        n  = S[r >>> 24];\n        n += S[0x100 | ((r >> 16) & 0xff)];\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\n        n += S[0x300 | (r & 0xff)];\n        l ^= n ^ P[14];\n        //Iteration 7\n        n  = S[l >>> 24];\n        n += S[0x100 | ((l >> 16) & 0xff)];\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\n        n += S[0x300 | (l & 0xff)];\n        r ^= n ^ P[15];\n        n  = S[r >>> 24];\n        n += S[0x100 | ((r >> 16) & 0xff)];\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\n        n += S[0x300 | (r & 0xff)];\n        l ^= n ^ P[16];\n\n        lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];\n        lr[off + 1] = l;\n        return lr;\n    }\n\n    /**\n     * @param {Array.<number>} data\n     * @param {number} offp\n     * @returns {{key: number, offp: number}}\n     * @inner\n     */\n    function _streamtoword(data, offp) {\n        for (var i = 0, word = 0; i < 4; ++i)\n            word = (word << 8) | (data[offp] & 0xff),\n            offp = (offp + 1) % data.length;\n        return { key: word, offp: offp };\n    }\n\n    /**\n     * @param {Array.<number>} key\n     * @param {Array.<number>} P\n     * @param {Array.<number>} S\n     * @inner\n     */\n    function _key(key, P, S) {\n        var offset = 0,\n            lr = [0, 0],\n            plen = P.length,\n            slen = S.length,\n            sw;\n        for (var i = 0; i < plen; i++)\n            sw = _streamtoword(key, offset),\n            offset = sw.offp,\n            P[i] = P[i] ^ sw.key;\n        for (i = 0; i < plen; i += 2)\n            lr = _encipher(lr, 0, P, S),\n            P[i] = lr[0],\n            P[i + 1] = lr[1];\n        for (i = 0; i < slen; i += 2)\n            lr = _encipher(lr, 0, P, S),\n            S[i] = lr[0],\n            S[i + 1] = lr[1];\n    }\n\n    /**\n     * Expensive key schedule Blowfish.\n     * @param {Array.<number>} data\n     * @param {Array.<number>} key\n     * @param {Array.<number>} P\n     * @param {Array.<number>} S\n     * @inner\n     */\n    function _ekskey(data, key, P, S) {\n        var offp = 0,\n            lr = [0, 0],\n            plen = P.length,\n            slen = S.length,\n            sw;\n        for (var i = 0; i < plen; i++)\n            sw = _streamtoword(key, offp),\n            offp = sw.offp,\n            P[i] = P[i] ^ sw.key;\n        offp = 0;\n        for (i = 0; i < plen; i += 2)\n            sw = _streamtoword(data, offp),\n            offp = sw.offp,\n            lr[0] ^= sw.key,\n            sw = _streamtoword(data, offp),\n            offp = sw.offp,\n            lr[1] ^= sw.key,\n            lr = _encipher(lr, 0, P, S),\n            P[i] = lr[0],\n            P[i + 1] = lr[1];\n        for (i = 0; i < slen; i += 2)\n            sw = _streamtoword(data, offp),\n            offp = sw.offp,\n            lr[0] ^= sw.key,\n            sw = _streamtoword(data, offp),\n            offp = sw.offp,\n            lr[1] ^= sw.key,\n            lr = _encipher(lr, 0, P, S),\n            S[i] = lr[0],\n            S[i + 1] = lr[1];\n    }\n\n    /**\n     * Internaly crypts a string.\n     * @param {Array.<number>} b Bytes to crypt\n     * @param {Array.<number>} salt Salt bytes to use\n     * @param {number} rounds Number of rounds\n     * @param {function(Error, Array.<number>=)=} callback Callback receiving the error, if any, and the resulting bytes. If\n     *  omitted, the operation will be performed synchronously.\n     *  @param {function(number)=} progressCallback Callback called with the current progress\n     * @returns {!Array.<number>|undefined} Resulting bytes if callback has been omitted, otherwise `undefined`\n     * @inner\n     */\n    function _crypt(b, salt, rounds, callback, progressCallback) {\n        var cdata = C_ORIG.slice(),\n            clen = cdata.length,\n            err;\n\n        // Validate\n        if (rounds < 4 || rounds > 31) {\n            err = Error(\"Illegal number of rounds (4-31): \"+rounds);\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            } else\n                throw err;\n        }\n        if (salt.length !== BCRYPT_SALT_LEN) {\n            err =Error(\"Illegal salt length: \"+salt.length+\" != \"+BCRYPT_SALT_LEN);\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            } else\n                throw err;\n        }\n        rounds = (1 << rounds) >>> 0;\n\n        var P, S, i = 0, j;\n\n        //Use typed arrays when available - huge speedup!\n        if (Int32Array) {\n            P = new Int32Array(P_ORIG);\n            S = new Int32Array(S_ORIG);\n        } else {\n            P = P_ORIG.slice();\n            S = S_ORIG.slice();\n        }\n\n        _ekskey(salt, b, P, S);\n\n        /**\n         * Calcualtes the next round.\n         * @returns {Array.<number>|undefined} Resulting array if callback has been omitted, otherwise `undefined`\n         * @inner\n         */\n        function next() {\n            if (progressCallback)\n                progressCallback(i / rounds);\n            if (i < rounds) {\n                var start = Date.now();\n                for (; i < rounds;) {\n                    i = i + 1;\n                    _key(b, P, S);\n                    _key(salt, P, S);\n                    if (Date.now() - start > MAX_EXECUTION_TIME)\n                        break;\n                }\n            } else {\n                for (i = 0; i < 64; i++)\n                    for (j = 0; j < (clen >> 1); j++)\n                        _encipher(cdata, j << 1, P, S);\n                var ret = [];\n                for (i = 0; i < clen; i++)\n                    ret.push(((cdata[i] >> 24) & 0xff) >>> 0),\n                    ret.push(((cdata[i] >> 16) & 0xff) >>> 0),\n                    ret.push(((cdata[i] >> 8) & 0xff) >>> 0),\n                    ret.push((cdata[i] & 0xff) >>> 0);\n                if (callback) {\n                    callback(null, ret);\n                    return;\n                } else\n                    return ret;\n            }\n            if (callback)\n                nextTick(next);\n        }\n\n        // Async\n        if (typeof callback !== 'undefined') {\n            next();\n\n            // Sync\n        } else {\n            var res;\n            while (true)\n                if (typeof(res = next()) !== 'undefined')\n                    return res || [];\n        }\n    }\n\n    /**\n     * Internally hashes a string.\n     * @param {string} s String to hash\n     * @param {?string} salt Salt to use, actually never null\n     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash. If omitted,\n     *  hashing is perormed synchronously.\n     *  @param {function(number)=} progressCallback Callback called with the current progress\n     * @returns {string|undefined} Resulting hash if callback has been omitted, otherwise `undefined`\n     * @inner\n     */\n    function _hash(s, salt, callback, progressCallback) {\n        var err;\n        if (typeof s !== 'string' || typeof salt !== 'string') {\n            err = Error(\"Invalid string / salt: Not a string\");\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            }\n            else\n                throw err;\n        }\n\n        // Validate the salt\n        var minor, offset;\n        if (salt.charAt(0) !== '$' || salt.charAt(1) !== '2') {\n            err = Error(\"Invalid salt version: \"+salt.substring(0,2));\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            }\n            else\n                throw err;\n        }\n        if (salt.charAt(2) === '$')\n            minor = String.fromCharCode(0),\n            offset = 3;\n        else {\n            minor = salt.charAt(2);\n            if ((minor !== 'a' && minor !== 'b' && minor !== 'y') || salt.charAt(3) !== '$') {\n                err = Error(\"Invalid salt revision: \"+salt.substring(2,4));\n                if (callback) {\n                    nextTick(callback.bind(this, err));\n                    return;\n                } else\n                    throw err;\n            }\n            offset = 4;\n        }\n\n        // Extract number of rounds\n        if (salt.charAt(offset + 2) > '$') {\n            err = Error(\"Missing salt rounds\");\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            } else\n                throw err;\n        }\n        var r1 = parseInt(salt.substring(offset, offset + 1), 10) * 10,\n            r2 = parseInt(salt.substring(offset + 1, offset + 2), 10),\n            rounds = r1 + r2,\n            real_salt = salt.substring(offset + 3, offset + 25);\n        s += minor >= 'a' ? \"\\x00\" : \"\";\n\n        var passwordb = stringToBytes(s),\n            saltb = base64_decode(real_salt, BCRYPT_SALT_LEN);\n\n        /**\n         * Finishes hashing.\n         * @param {Array.<number>} bytes Byte array\n         * @returns {string}\n         * @inner\n         */\n        function finish(bytes) {\n            var res = [];\n            res.push(\"$2\");\n            if (minor >= 'a')\n                res.push(minor);\n            res.push(\"$\");\n            if (rounds < 10)\n                res.push(\"0\");\n            res.push(rounds.toString());\n            res.push(\"$\");\n            res.push(base64_encode(saltb, saltb.length));\n            res.push(base64_encode(bytes, C_ORIG.length * 4 - 1));\n            return res.join('');\n        }\n\n        // Sync\n        if (typeof callback == 'undefined')\n            return finish(_crypt(passwordb, saltb, rounds));\n\n        // Async\n        else {\n            _crypt(passwordb, saltb, rounds, function(err, bytes) {\n                if (err)\n                    callback(err, null);\n                else\n                    callback(null, finish(bytes));\n            }, progressCallback);\n        }\n    }\n\n    /**\n     * Encodes a byte array to base64 with up to len bytes of input, using the custom bcrypt alphabet.\n     * @function\n     * @param {!Array.<number>} b Byte array\n     * @param {number} len Maximum input length\n     * @returns {string}\n     */\n    bcrypt.encodeBase64 = base64_encode;\n\n    /**\n     * Decodes a base64 encoded string to up to len bytes of output, using the custom bcrypt alphabet.\n     * @function\n     * @param {string} s String to decode\n     * @param {number} len Maximum output length\n     * @returns {!Array.<number>}\n     */\n    bcrypt.decodeBase64 = base64_decode;\n\n    return bcrypt;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/bcryptjs-react/dist/bcrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/bcryptjs-react/dist/bcrypt.js":
/*!****************************************************!*\
  !*** ./node_modules/bcryptjs-react/dist/bcrypt.js ***!
  \****************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n Copyright (c) 2012 Nevins Bartolomeo <nevins.bartolomeo@gmail.com>\n Copyright (c) 2012 Shane Girish <shaneGirish@gmail.com>\n Copyright (c) 2014 Daniel Wirtz <dcode@dcode.io>\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n 1. Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n 3. The name of the author may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @license bcrypt.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\n * Released under the Apache License, Version 2.0\n * see: https://github.com/dcodeIO/bcrypt.js for details\n */\n(function(global, factory) {\n\n    /* AMD */ if (true)\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    /* CommonJS */ else {}\n\n}(this, function() {\n    \"use strict\";\n\n    /**\n     * bcrypt namespace.\n     * @type {Object.<string,*>}\n     */\n    var bcrypt = {};\n\n    /**\n     * The random implementation to use as a fallback.\n     * @type {?function(number):!Array.<number>}\n     * @inner\n     */\n    var randomFallback = null;\n\n    /**\n     * Generates cryptographically secure random bytes.\n     * @function\n     * @param {number} len Bytes length\n     * @returns {!Array.<number>} Random bytes\n     * @throws {Error} If no random implementation is available\n     * @inner\n     */\n    function random(len) {\n\n        /* WCA */ try {\n            var a; (self['crypto']||self['msCrypto'])['getRandomValues'](a = new Uint32Array(len));\n            return Array.prototype.slice.call(a);\n        } catch (e) {}\n        /* fallback */ if (!randomFallback)\n            throw Error(\"Neither WebCryptoAPI nor a crypto module is available. Use bcrypt.setRandomFallback to set an alternative\");\n        return randomFallback(len);\n    }\n\n    // Test if any secure randomness source is available\n    var randomAvailable = false;\n    try {\n        random(1);\n        randomAvailable = true;\n    } catch (e) {}\n\n    // Default fallback, if any\n    randomFallback = null;\n    /**\n     * Sets the pseudo random number generator to use as a fallback if neither node's `crypto` module nor the Web Crypto\n     *  API is available. Please note: It is highly important that the PRNG used is cryptographically secure and that it\n     *  is seeded properly!\n     * @param {?function(number):!Array.<number>} random Function taking the number of bytes to generate as its\n     *  sole argument, returning the corresponding array of cryptographically secure random byte values.\n     * @see http://nodejs.org/api/crypto.html\n     * @see http://www.w3.org/TR/WebCryptoAPI/\n     */\n    bcrypt.setRandomFallback = function(random) {\n        randomFallback = random;\n    };\n\n    /**\n     * Synchronously generates a salt.\n     * @param {number=} rounds Number of rounds to use, defaults to 10 if omitted\n     * @param {number=} seed_length Not supported.\n     * @returns {string} Resulting salt\n     * @throws {Error} If a random fallback is required but not set\n     */\n    bcrypt.genSaltSync = function(rounds, seed_length) {\n        rounds = rounds || GENSALT_DEFAULT_LOG2_ROUNDS;\n        if (typeof rounds !== 'number')\n            throw Error(\"Illegal arguments: \"+(typeof rounds)+\", \"+(typeof seed_length));\n        if (rounds < 4)\n            rounds = 4;\n        else if (rounds > 31)\n            rounds = 31;\n        var salt = [];\n        salt.push(\"$2a$\");\n        if (rounds < 10)\n            salt.push(\"0\");\n        salt.push(rounds.toString());\n        salt.push('$');\n        salt.push(base64_encode(random(BCRYPT_SALT_LEN), BCRYPT_SALT_LEN)); // May throw\n        return salt.join('');\n    };\n\n    /**\n     * Asynchronously generates a salt.\n     * @param {(number|function(Error, string=))=} rounds Number of rounds to use, defaults to 10 if omitted\n     * @param {(number|function(Error, string=))=} seed_length Not supported.\n     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting salt\n     * @returns {!Promise} If `callback` has been omitted\n     * @throws {Error} If `callback` is present but not a function\n     */\n    bcrypt.genSalt = function(rounds, seed_length, callback) {\n        if (typeof seed_length === 'function')\n            callback = seed_length,\n            seed_length = undefined; // Not supported.\n        if (typeof rounds === 'function')\n            callback = rounds,\n            rounds = undefined;\n        if (typeof rounds === 'undefined')\n            rounds = GENSALT_DEFAULT_LOG2_ROUNDS;\n        else if (typeof rounds !== 'number')\n            throw Error(\"illegal arguments: \"+(typeof rounds));\n\n        function _async(callback) {\n            nextTick(function() { // Pretty thin, but salting is fast enough\n                try {\n                    callback(null, bcrypt.genSaltSync(rounds));\n                } catch (err) {\n                    callback(err);\n                }\n            });\n        }\n\n        if (callback) {\n            if (typeof callback !== 'function')\n                throw Error(\"Illegal callback: \"+typeof(callback));\n            _async(callback);\n        } else\n            return new Promise(function(resolve, reject) {\n                _async(function(err, res) {\n                    if (err) {\n                        reject(err);\n                        return;\n                    }\n                    resolve(res);\n                });\n            });\n    };\n\n    /**\n     * Synchronously generates a hash for the given string.\n     * @param {string} s String to hash\n     * @param {(number|string)=} salt Salt length to generate or salt to use, default to 10\n     * @returns {string} Resulting hash\n     */\n    bcrypt.hashSync = function(s, salt) {\n        if (typeof salt === 'undefined')\n            salt = GENSALT_DEFAULT_LOG2_ROUNDS;\n        if (typeof salt === 'number')\n            salt = bcrypt.genSaltSync(salt);\n        if (typeof s !== 'string' || typeof salt !== 'string')\n            throw Error(\"Illegal arguments: \"+(typeof s)+', '+(typeof salt));\n        return _hash(s, salt);\n    };\n\n    /**\n     * Asynchronously generates a hash for the given string.\n     * @param {string} s String to hash\n     * @param {number|string} salt Salt length to generate or salt to use\n     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash\n     * @param {function(number)=} progressCallback Callback successively called with the percentage of rounds completed\n     *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\n     * @returns {!Promise} If `callback` has been omitted\n     * @throws {Error} If `callback` is present but not a function\n     */\n    bcrypt.hash = function(s, salt, callback, progressCallback) {\n\n        function _async(callback) {\n            if (typeof s === 'string' && typeof salt === 'number')\n                bcrypt.genSalt(salt, function(err, salt) {\n                    _hash(s, salt, callback, progressCallback);\n                });\n            else if (typeof s === 'string' && typeof salt === 'string')\n                _hash(s, salt, callback, progressCallback);\n            else\n                nextTick(callback.bind(this, Error(\"Illegal arguments: \"+(typeof s)+', '+(typeof salt))));\n        }\n\n        if (callback) {\n            if (typeof callback !== 'function')\n                throw Error(\"Illegal callback: \"+typeof(callback));\n            _async(callback);\n        } else\n            return new Promise(function(resolve, reject) {\n                _async(function(err, res) {\n                    if (err) {\n                        reject(err);\n                        return;\n                    }\n                    resolve(res);\n                });\n            });\n    };\n\n    /**\n     * Compares two strings of the same length in constant time.\n     * @param {string} known Must be of the correct length\n     * @param {string} unknown Must be the same length as `known`\n     * @returns {boolean}\n     * @inner\n     */\n    function safeStringCompare(known, unknown) {\n        var diff = known.length ^ unknown.length;\n        for (var i = 0; i < known.length; ++i) {\n            diff |= known.charCodeAt(i) ^ unknown.charCodeAt(i);\n        }\n        return diff === 0;\n    }\n\n    /**\n     * Synchronously tests a string against a hash.\n     * @param {string} s String to compare\n     * @param {string} hash Hash to test against\n     * @returns {boolean} true if matching, otherwise false\n     * @throws {Error} If an argument is illegal\n     */\n    bcrypt.compareSync = function(s, hash) {\n        if (typeof s !== \"string\" || typeof hash !== \"string\")\n            throw Error(\"Illegal arguments: \"+(typeof s)+', '+(typeof hash));\n        if (hash.length !== 60)\n            return false;\n        return safeStringCompare(bcrypt.hashSync(s, hash.substr(0, hash.length-31)), hash);\n    };\n\n    /**\n     * Asynchronously compares the given data against the given hash.\n     * @param {string} s Data to compare\n     * @param {string} hash Data to be compared to\n     * @param {function(Error, boolean)=} callback Callback receiving the error, if any, otherwise the result\n     * @param {function(number)=} progressCallback Callback successively called with the percentage of rounds completed\n     *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\n     * @returns {!Promise} If `callback` has been omitted\n     * @throws {Error} If `callback` is present but not a function\n     */\n    bcrypt.compare = function(s, hash, callback, progressCallback) {\n\n        function _async(callback) {\n            if (typeof s !== \"string\" || typeof hash !== \"string\") {\n                nextTick(callback.bind(this, Error(\"Illegal arguments: \"+(typeof s)+', '+(typeof hash))));\n                return;\n            }\n            if (hash.length !== 60) {\n                nextTick(callback.bind(this, null, false));\n                return;\n            }\n            bcrypt.hash(s, hash.substr(0, 29), function(err, comp) {\n                if (err)\n                    callback(err);\n                else\n                    callback(null, safeStringCompare(comp, hash));\n            }, progressCallback);\n        }\n\n        if (callback) {\n            if (typeof callback !== 'function')\n                throw Error(\"Illegal callback: \"+typeof(callback));\n            _async(callback);\n        } else\n            return new Promise(function(resolve, reject) {\n                _async(function(err, res) {\n                    if (err) {\n                        reject(err);\n                        return;\n                    }\n                    resolve(res);\n                });\n            });\n    };\n\n    /**\n     * Gets the number of rounds used to encrypt the specified hash.\n     * @param {string} hash Hash to extract the used number of rounds from\n     * @returns {number} Number of rounds used\n     * @throws {Error} If `hash` is not a string\n     */\n    bcrypt.getRounds = function(hash) {\n        if (typeof hash !== \"string\")\n            throw Error(\"Illegal arguments: \"+(typeof hash));\n        return parseInt(hash.split(\"$\")[2], 10);\n    };\n\n    /**\n     * Gets the salt portion from a hash. Does not validate the hash.\n     * @param {string} hash Hash to extract the salt from\n     * @returns {string} Extracted salt part\n     * @throws {Error} If `hash` is not a string or otherwise invalid\n     */\n    bcrypt.getSalt = function(hash) {\n        if (typeof hash !== 'string')\n            throw Error(\"Illegal arguments: \"+(typeof hash));\n        if (hash.length !== 60)\n            throw Error(\"Illegal hash length: \"+hash.length+\" != 60\");\n        return hash.substring(0, 29);\n    };\n\n    /**\n     * Continues with the callback on the next tick.\n     * @function\n     * @param {function(...[*])} callback Callback to execute\n     * @inner\n     */\n    var nextTick = typeof process !== 'undefined' && process && typeof process.nextTick === 'function'\n        ? (typeof setImmediate === 'function' ? setImmediate : process.nextTick)\n        : setTimeout;\n\n    /** Calculates the byte length of a string encoded as UTF8. */\n    function utf8Length(string) {\n      var len = 0,\n          c = 0;\n      for (var i = 0; i < string.length; ++i) {\n          c = string.charCodeAt(i);\n          if (c < 128)\n              len += 1;\n          else if (c < 2048)\n              len += 2;\n          else if (\n            (c                        & 0xFC00) === 0xD800 &&\n            (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00\n          ) {\n              ++i;\n              len += 4;\n          } else\n              len += 3;\n      }\n      return len;\n    }\n\n    /** Converts a string to an array of UTF8 bytes. */\n    function utf8Array(string) {\n      var offset = 0,\n          c1, c2;\n      var buffer = new Array(utf8Length(string));\n      for (var i = 0, k = string.length; i < k; ++i) {\n          c1 = string.charCodeAt(i);\n          if (c1 < 128) {\n              buffer[offset++] = c1;\n          } else if (c1 < 2048) {\n              buffer[offset++] = c1 >> 6       | 192;\n              buffer[offset++] = c1       & 63 | 128;\n          } else if (\n            ( c1                             & 0xFC00) === 0xD800 &&\n            ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00\n          ) {\n              c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\n              ++i;\n              buffer[offset++] = c1 >> 18      | 240;\n              buffer[offset++] = c1 >> 12 & 63 | 128;\n              buffer[offset++] = c1 >> 6  & 63 | 128;\n              buffer[offset++] = c1       & 63 | 128;\n          } else {\n              buffer[offset++] = c1 >> 12      | 224;\n              buffer[offset++] = c1 >> 6  & 63 | 128;\n              buffer[offset++] = c1       & 63 | 128;\n          }\n      }\n      return buffer;\n    }\n\n    /**\n     * Converts a JavaScript string to UTF8 bytes.\n     * @function\n     * @param {string} str String\n     * @returns {!Array.<number>} UTF8 bytes\n     * @inner\n     */\n    var stringToBytes = utf8Array;\n\n    // A base64 implementation for the bcrypt algorithm. This is partly non-standard.\n\n    /**\n     * bcrypt's own non-standard base64 dictionary.\n     * @type {!Array.<string>}\n     * @const\n     * @inner\n     **/\n    var BASE64_CODE = \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".split('');\n\n    /**\n     * @type {!Array.<number>}\n     * @const\n     * @inner\n     **/\n    var BASE64_INDEX = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,\n        1, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1,\n        -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, -1, -1, -1, -1, -1, -1, 28, 29, 30,\n        31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, -1, -1, -1, -1, -1];\n\n    /**\n     * @type {!function(...number):string}\n     * @inner\n     */\n    var stringFromCharCode = String.fromCharCode;\n\n    /**\n     * Encodes a byte array to base64 with up to len bytes of input.\n     * @param {!Array.<number>} b Byte array\n     * @param {number} len Maximum input length\n     * @returns {string}\n     * @inner\n     */\n    function base64_encode(b, len) {\n        var off = 0,\n            rs = [],\n            c1, c2;\n        if (len <= 0 || len > b.length)\n            throw Error(\"Illegal len: \"+len);\n        while (off < len) {\n            c1 = b[off++] & 0xff;\n            rs.push(BASE64_CODE[(c1 >> 2) & 0x3f]);\n            c1 = (c1 & 0x03) << 4;\n            if (off >= len) {\n                rs.push(BASE64_CODE[c1 & 0x3f]);\n                break;\n            }\n            c2 = b[off++] & 0xff;\n            c1 |= (c2 >> 4) & 0x0f;\n            rs.push(BASE64_CODE[c1 & 0x3f]);\n            c1 = (c2 & 0x0f) << 2;\n            if (off >= len) {\n                rs.push(BASE64_CODE[c1 & 0x3f]);\n                break;\n            }\n            c2 = b[off++] & 0xff;\n            c1 |= (c2 >> 6) & 0x03;\n            rs.push(BASE64_CODE[c1 & 0x3f]);\n            rs.push(BASE64_CODE[c2 & 0x3f]);\n        }\n        return rs.join('');\n    }\n\n    /**\n     * Decodes a base64 encoded string to up to len bytes of output.\n     * @param {string} s String to decode\n     * @param {number} len Maximum output length\n     * @returns {!Array.<number>}\n     * @inner\n     */\n    function base64_decode(s, len) {\n        var off = 0,\n            slen = s.length,\n            olen = 0,\n            rs = [],\n            c1, c2, c3, c4, o, code;\n        if (len <= 0)\n            throw Error(\"Illegal len: \"+len);\n        while (off < slen - 1 && olen < len) {\n            code = s.charCodeAt(off++);\n            c1 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            code = s.charCodeAt(off++);\n            c2 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            if (c1 == -1 || c2 == -1)\n                break;\n            o = (c1 << 2) >>> 0;\n            o |= (c2 & 0x30) >> 4;\n            rs.push(stringFromCharCode(o));\n            if (++olen >= len || off >= slen)\n                break;\n            code = s.charCodeAt(off++);\n            c3 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            if (c3 == -1)\n                break;\n            o = ((c2 & 0x0f) << 4) >>> 0;\n            o |= (c3 & 0x3c) >> 2;\n            rs.push(stringFromCharCode(o));\n            if (++olen >= len || off >= slen)\n                break;\n            code = s.charCodeAt(off++);\n            c4 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n            o = ((c3 & 0x03) << 6) >>> 0;\n            o |= c4;\n            rs.push(stringFromCharCode(o));\n            ++olen;\n        }\n        var res = [];\n        for (off = 0; off<olen; off++)\n            res.push(rs[off].charCodeAt(0));\n        return res;\n    }\n\n    Date.now = Date.now || function() { return +new Date; };\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var BCRYPT_SALT_LEN = 16;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var GENSALT_DEFAULT_LOG2_ROUNDS = 10;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var BLOWFISH_NUM_ROUNDS = 16;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var MAX_EXECUTION_TIME = 100;\n\n    /**\n     * @type {Array.<number>}\n     * @const\n     * @inner\n     */\n    var P_ORIG = [\n        0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822,\n        0x299f31d0, 0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377,\n        0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5,\n        0xb5470917, 0x9216d5d9, 0x8979fb1b\n    ];\n\n    /**\n     * @type {Array.<number>}\n     * @const\n     * @inner\n     */\n    var S_ORIG = [\n        0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed,\n        0x6a267e96, 0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7,\n        0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3,\n        0xf4933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee,\n        0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013, 0xc5d1b023,\n        0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e,\n        0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda,\n        0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,\n        0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af,\n        0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c55d, 0x741831f6,\n        0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381,\n        0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,\n        0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d,\n        0xe98575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5,\n        0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa4842004, 0x69c8f04a,\n        0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,\n        0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3, 0x6eef0b6c,\n        0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176,\n        0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3,\n        0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,\n        0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724,\n        0xd00a1248, 0xdb0fead3, 0x49f1c09b, 0x075372c9, 0x80991b7b,\n        0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd,\n        0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,\n        0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f,\n        0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd,\n        0x660f2807, 0x192e4bb3, 0xc0cba857, 0x45c8740f, 0xd20b5f39,\n        0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,\n        0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df,\n        0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760,\n        0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e,\n        0xdf1769db, 0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,\n        0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98,\n        0xfd2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565,\n        0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33, 0x62fb1341,\n        0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,\n        0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0,\n        0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64,\n        0x8888b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191,\n        0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,\n        0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0,\n        0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705,\n        0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5,\n        0xfb9d35cf, 0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,\n        0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af, 0x2464369b,\n        0xf009b91e, 0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f,\n        0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9, 0x11c81968,\n        0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,\n        0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5,\n        0x571be91f, 0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6,\n        0xff34052e, 0xc5855664, 0x53b02d5d, 0xa99f8fa1, 0x08ba4799,\n        0x6e85076a, 0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623,\n        0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266, 0xecaa8c71,\n        0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29,\n        0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6,\n        0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,\n        0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f,\n        0x3ebaefc9, 0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286,\n        0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c, 0x8e7d44ec,\n        0x5716f2b8, 0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,\n        0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113f9,\n        0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc,\n        0xc8b57634, 0x9af3dda7, 0xa9446146, 0x0fd0030e, 0xecc8c73e,\n        0xa4751e41, 0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,\n        0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf, 0x2cb81290,\n        0x24977c79, 0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd9930810,\n        0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6,\n        0x9f84cd87, 0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,\n        0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847,\n        0x3215d908, 0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451,\n        0x50940002, 0x133ae4dd, 0x71dff89e, 0x10314e55, 0x81ac77d6,\n        0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,\n        0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570,\n        0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa,\n        0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978,\n        0x9c10b36a, 0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4,\n        0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960, 0x5223a708,\n        0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883,\n        0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185,\n        0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,\n        0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830,\n        0xeb61bd96, 0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239,\n        0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7, 0x9cab5cab,\n        0xb2f3846e, 0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,\n        0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19,\n        0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77,\n        0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1,\n        0x7858ba99, 0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,\n        0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128, 0x58ebf2ef,\n        0x34c6ffea, 0xfe28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3,\n        0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15,\n        0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,\n        0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2,\n        0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492,\n        0x47848a0b, 0x5692b285, 0x095bbf00, 0xad19489d, 0x1462b174,\n        0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,\n        0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759,\n        0xcbee7460, 0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e,\n        0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc,\n        0x800bcadc, 0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9,\n        0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340, 0xc5c43465,\n        0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a,\n        0xe6e39f2b, 0xdb83adf7, 0xe93d5a68, 0x948140f7, 0xf64c261c,\n        0x94692934, 0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,\n        0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af, 0x1e39f62e,\n        0x97244546, 0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af,\n        0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0,\n        0x31cb8504, 0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,\n        0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb, 0x68dc1462,\n        0xd7486900, 0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c,\n        0xb58ce006, 0x7af4d6b6, 0xaace1e7c, 0xd3375fec, 0xce78a399,\n        0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,\n        0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74,\n        0xdd5b4332, 0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397,\n        0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7,\n        0xd096954b, 0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,\n        0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c, 0xfdf8e802,\n        0x04272f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22,\n        0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f, 0x404779a4,\n        0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,\n        0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2,\n        0x02e1329e, 0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1,\n        0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99, 0xde720c8c,\n        0x2da2f728, 0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,\n        0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0x0a476341,\n        0x992eff74, 0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8,\n        0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b,\n        0xdcd0e804, 0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,\n        0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3, 0xbb132f88,\n        0x515bad24, 0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979,\n        0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc,\n        0x782ef11c, 0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,\n        0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659,\n        0x0a121386, 0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f,\n        0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086, 0x60787bf8,\n        0x6003604d, 0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,\n        0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be,\n        0xbde8ae24, 0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2,\n        0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255,\n        0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,\n        0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c, 0xb90bace1,\n        0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09,\n        0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c, 0x4a99a025,\n        0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,\n        0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01,\n        0xa70683fa, 0xa002b5c4, 0x0de6d027, 0x9af88c27, 0x773f8641,\n        0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0, 0x006058aa,\n        0x30dc7d62, 0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,\n        0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76, 0x6f05e409,\n        0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9,\n        0x1ac15bb4, 0xd39eb8fc, 0xed545578, 0x08fca5b5, 0xd83d7cd3,\n        0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,\n        0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837, 0xd79a3234,\n        0x92638212, 0x670efa8e, 0x406000e0, 0x3a39ce37, 0xd3faf5cf,\n        0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742, 0xd3822740,\n        0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,\n        0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f,\n        0xbc946e79, 0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d,\n        0xd5730a1d, 0x4cd04dc6, 0x2939bbdb, 0xa9ba4650, 0xac9526e8,\n        0xbe5ee304, 0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,\n        0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4, 0x83c061ba,\n        0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1,\n        0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69,\n        0x77fa0a59, 0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,\n        0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a,\n        0x017da67d, 0xd1cf3ed6, 0x7c7d2d28, 0x1f9f25cf, 0xadf2b89b,\n        0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6, 0x47b0acfd,\n        0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,\n        0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4,\n        0x88f46dba, 0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2,\n        0x97271aec, 0xa93a072a, 0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb,\n        0x26dcf319, 0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb,\n        0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f, 0x4de81751,\n        0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce,\n        0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369,\n        0x6413e680, 0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,\n        0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae, 0x5bbef7dd,\n        0x1b588d40, 0xccd2017f, 0x6bb4e3bb, 0xdda26a7e, 0x3a59ff45,\n        0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb, 0x8d6612ae,\n        0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,\n        0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08,\n        0x4eb4e2cc, 0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d,\n        0x06b89fb4, 0xce6ea048, 0x6f3f3b82, 0x3520ab82, 0x011a1d4b,\n        0x277227f8, 0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,\n        0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9, 0xe01cc87e,\n        0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a,\n        0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c,\n        0xe0b12b4f, 0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,\n        0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525, 0xfae59361,\n        0xceb69ceb, 0xc2a86459, 0x12baa8d1, 0xb6c1075e, 0xe3056a0c,\n        0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b, 0x4c98a0be,\n        0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,\n        0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d,\n        0x9b992f2e, 0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891,\n        0xce6279cf, 0xcd3e7e6f, 0x1618b166, 0xfd2c1d05, 0x848fd2c5,\n        0xf6fb2299, 0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02,\n        0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc, 0xde966292,\n        0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a,\n        0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2,\n        0x35bdd2f6, 0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,\n        0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0, 0xba38209c,\n        0xf746ce76, 0x77afa1c5, 0x20756060, 0x85cbfe4e, 0x8ae88dd8,\n        0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c, 0x01c36ae4,\n        0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,\n        0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6\n    ];\n\n    /**\n     * @type {Array.<number>}\n     * @const\n     * @inner\n     */\n    var C_ORIG = [\n        0x4f727068, 0x65616e42, 0x65686f6c, 0x64657253, 0x63727944,\n        0x6f756274\n    ];\n\n    /**\n     * @param {Array.<number>} lr\n     * @param {number} off\n     * @param {Array.<number>} P\n     * @param {Array.<number>} S\n     * @returns {Array.<number>}\n     * @inner\n     */\n    function _encipher(lr, off, P, S) { // This is our bottleneck: 1714/1905 ticks / 90% - see profile.txt\n        var n,\n            l = lr[off],\n            r = lr[off + 1];\n\n        l ^= P[0];\n\n        /*\n        for (var i=0, k=BLOWFISH_NUM_ROUNDS-2; i<=k;)\n            // Feistel substitution on left word\n            n  = S[l >>> 24],\n            n += S[0x100 | ((l >> 16) & 0xff)],\n            n ^= S[0x200 | ((l >> 8) & 0xff)],\n            n += S[0x300 | (l & 0xff)],\n            r ^= n ^ P[++i],\n            // Feistel substitution on right word\n            n  = S[r >>> 24],\n            n += S[0x100 | ((r >> 16) & 0xff)],\n            n ^= S[0x200 | ((r >> 8) & 0xff)],\n            n += S[0x300 | (r & 0xff)],\n            l ^= n ^ P[++i];\n        */\n\n        //The following is an unrolled version of the above loop.\n        //Iteration 0\n        n  = S[l >>> 24];\n        n += S[0x100 | ((l >> 16) & 0xff)];\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\n        n += S[0x300 | (l & 0xff)];\n        r ^= n ^ P[1];\n        n  = S[r >>> 24];\n        n += S[0x100 | ((r >> 16) & 0xff)];\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\n        n += S[0x300 | (r & 0xff)];\n        l ^= n ^ P[2];\n        //Iteration 1\n        n  = S[l >>> 24];\n        n += S[0x100 | ((l >> 16) & 0xff)];\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\n        n += S[0x300 | (l & 0xff)];\n        r ^= n ^ P[3];\n        n  = S[r >>> 24];\n        n += S[0x100 | ((r >> 16) & 0xff)];\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\n        n += S[0x300 | (r & 0xff)];\n        l ^= n ^ P[4];\n        //Iteration 2\n        n  = S[l >>> 24];\n        n += S[0x100 | ((l >> 16) & 0xff)];\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\n        n += S[0x300 | (l & 0xff)];\n        r ^= n ^ P[5];\n        n  = S[r >>> 24];\n        n += S[0x100 | ((r >> 16) & 0xff)];\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\n        n += S[0x300 | (r & 0xff)];\n        l ^= n ^ P[6];\n        //Iteration 3\n        n  = S[l >>> 24];\n        n += S[0x100 | ((l >> 16) & 0xff)];\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\n        n += S[0x300 | (l & 0xff)];\n        r ^= n ^ P[7];\n        n  = S[r >>> 24];\n        n += S[0x100 | ((r >> 16) & 0xff)];\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\n        n += S[0x300 | (r & 0xff)];\n        l ^= n ^ P[8];\n        //Iteration 4\n        n  = S[l >>> 24];\n        n += S[0x100 | ((l >> 16) & 0xff)];\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\n        n += S[0x300 | (l & 0xff)];\n        r ^= n ^ P[9];\n        n  = S[r >>> 24];\n        n += S[0x100 | ((r >> 16) & 0xff)];\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\n        n += S[0x300 | (r & 0xff)];\n        l ^= n ^ P[10];\n        //Iteration 5\n        n  = S[l >>> 24];\n        n += S[0x100 | ((l >> 16) & 0xff)];\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\n        n += S[0x300 | (l & 0xff)];\n        r ^= n ^ P[11];\n        n  = S[r >>> 24];\n        n += S[0x100 | ((r >> 16) & 0xff)];\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\n        n += S[0x300 | (r & 0xff)];\n        l ^= n ^ P[12];\n        //Iteration 6\n        n  = S[l >>> 24];\n        n += S[0x100 | ((l >> 16) & 0xff)];\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\n        n += S[0x300 | (l & 0xff)];\n        r ^= n ^ P[13];\n        n  = S[r >>> 24];\n        n += S[0x100 | ((r >> 16) & 0xff)];\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\n        n += S[0x300 | (r & 0xff)];\n        l ^= n ^ P[14];\n        //Iteration 7\n        n  = S[l >>> 24];\n        n += S[0x100 | ((l >> 16) & 0xff)];\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\n        n += S[0x300 | (l & 0xff)];\n        r ^= n ^ P[15];\n        n  = S[r >>> 24];\n        n += S[0x100 | ((r >> 16) & 0xff)];\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\n        n += S[0x300 | (r & 0xff)];\n        l ^= n ^ P[16];\n\n        lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];\n        lr[off + 1] = l;\n        return lr;\n    }\n\n    /**\n     * @param {Array.<number>} data\n     * @param {number} offp\n     * @returns {{key: number, offp: number}}\n     * @inner\n     */\n    function _streamtoword(data, offp) {\n        for (var i = 0, word = 0; i < 4; ++i)\n            word = (word << 8) | (data[offp] & 0xff),\n            offp = (offp + 1) % data.length;\n        return { key: word, offp: offp };\n    }\n\n    /**\n     * @param {Array.<number>} key\n     * @param {Array.<number>} P\n     * @param {Array.<number>} S\n     * @inner\n     */\n    function _key(key, P, S) {\n        var offset = 0,\n            lr = [0, 0],\n            plen = P.length,\n            slen = S.length,\n            sw;\n        for (var i = 0; i < plen; i++)\n            sw = _streamtoword(key, offset),\n            offset = sw.offp,\n            P[i] = P[i] ^ sw.key;\n        for (i = 0; i < plen; i += 2)\n            lr = _encipher(lr, 0, P, S),\n            P[i] = lr[0],\n            P[i + 1] = lr[1];\n        for (i = 0; i < slen; i += 2)\n            lr = _encipher(lr, 0, P, S),\n            S[i] = lr[0],\n            S[i + 1] = lr[1];\n    }\n\n    /**\n     * Expensive key schedule Blowfish.\n     * @param {Array.<number>} data\n     * @param {Array.<number>} key\n     * @param {Array.<number>} P\n     * @param {Array.<number>} S\n     * @inner\n     */\n    function _ekskey(data, key, P, S) {\n        var offp = 0,\n            lr = [0, 0],\n            plen = P.length,\n            slen = S.length,\n            sw;\n        for (var i = 0; i < plen; i++)\n            sw = _streamtoword(key, offp),\n            offp = sw.offp,\n            P[i] = P[i] ^ sw.key;\n        offp = 0;\n        for (i = 0; i < plen; i += 2)\n            sw = _streamtoword(data, offp),\n            offp = sw.offp,\n            lr[0] ^= sw.key,\n            sw = _streamtoword(data, offp),\n            offp = sw.offp,\n            lr[1] ^= sw.key,\n            lr = _encipher(lr, 0, P, S),\n            P[i] = lr[0],\n            P[i + 1] = lr[1];\n        for (i = 0; i < slen; i += 2)\n            sw = _streamtoword(data, offp),\n            offp = sw.offp,\n            lr[0] ^= sw.key,\n            sw = _streamtoword(data, offp),\n            offp = sw.offp,\n            lr[1] ^= sw.key,\n            lr = _encipher(lr, 0, P, S),\n            S[i] = lr[0],\n            S[i + 1] = lr[1];\n    }\n\n    /**\n     * Internaly crypts a string.\n     * @param {Array.<number>} b Bytes to crypt\n     * @param {Array.<number>} salt Salt bytes to use\n     * @param {number} rounds Number of rounds\n     * @param {function(Error, Array.<number>=)=} callback Callback receiving the error, if any, and the resulting bytes. If\n     *  omitted, the operation will be performed synchronously.\n     *  @param {function(number)=} progressCallback Callback called with the current progress\n     * @returns {!Array.<number>|undefined} Resulting bytes if callback has been omitted, otherwise `undefined`\n     * @inner\n     */\n    function _crypt(b, salt, rounds, callback, progressCallback) {\n        var cdata = C_ORIG.slice(),\n            clen = cdata.length,\n            err;\n\n        // Validate\n        if (rounds < 4 || rounds > 31) {\n            err = Error(\"Illegal number of rounds (4-31): \"+rounds);\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            } else\n                throw err;\n        }\n        if (salt.length !== BCRYPT_SALT_LEN) {\n            err =Error(\"Illegal salt length: \"+salt.length+\" != \"+BCRYPT_SALT_LEN);\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            } else\n                throw err;\n        }\n        rounds = (1 << rounds) >>> 0;\n\n        var P, S, i = 0, j;\n\n        //Use typed arrays when available - huge speedup!\n        if (Int32Array) {\n            P = new Int32Array(P_ORIG);\n            S = new Int32Array(S_ORIG);\n        } else {\n            P = P_ORIG.slice();\n            S = S_ORIG.slice();\n        }\n\n        _ekskey(salt, b, P, S);\n\n        /**\n         * Calcualtes the next round.\n         * @returns {Array.<number>|undefined} Resulting array if callback has been omitted, otherwise `undefined`\n         * @inner\n         */\n        function next() {\n            if (progressCallback)\n                progressCallback(i / rounds);\n            if (i < rounds) {\n                var start = Date.now();\n                for (; i < rounds;) {\n                    i = i + 1;\n                    _key(b, P, S);\n                    _key(salt, P, S);\n                    if (Date.now() - start > MAX_EXECUTION_TIME)\n                        break;\n                }\n            } else {\n                for (i = 0; i < 64; i++)\n                    for (j = 0; j < (clen >> 1); j++)\n                        _encipher(cdata, j << 1, P, S);\n                var ret = [];\n                for (i = 0; i < clen; i++)\n                    ret.push(((cdata[i] >> 24) & 0xff) >>> 0),\n                    ret.push(((cdata[i] >> 16) & 0xff) >>> 0),\n                    ret.push(((cdata[i] >> 8) & 0xff) >>> 0),\n                    ret.push((cdata[i] & 0xff) >>> 0);\n                if (callback) {\n                    callback(null, ret);\n                    return;\n                } else\n                    return ret;\n            }\n            if (callback)\n                nextTick(next);\n        }\n\n        // Async\n        if (typeof callback !== 'undefined') {\n            next();\n\n            // Sync\n        } else {\n            var res;\n            while (true)\n                if (typeof(res = next()) !== 'undefined')\n                    return res || [];\n        }\n    }\n\n    /**\n     * Internally hashes a string.\n     * @param {string} s String to hash\n     * @param {?string} salt Salt to use, actually never null\n     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash. If omitted,\n     *  hashing is perormed synchronously.\n     *  @param {function(number)=} progressCallback Callback called with the current progress\n     * @returns {string|undefined} Resulting hash if callback has been omitted, otherwise `undefined`\n     * @inner\n     */\n    function _hash(s, salt, callback, progressCallback) {\n        var err;\n        if (typeof s !== 'string' || typeof salt !== 'string') {\n            err = Error(\"Invalid string / salt: Not a string\");\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            }\n            else\n                throw err;\n        }\n\n        // Validate the salt\n        var minor, offset;\n        if (salt.charAt(0) !== '$' || salt.charAt(1) !== '2') {\n            err = Error(\"Invalid salt version: \"+salt.substring(0,2));\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            }\n            else\n                throw err;\n        }\n        if (salt.charAt(2) === '$')\n            minor = String.fromCharCode(0),\n            offset = 3;\n        else {\n            minor = salt.charAt(2);\n            if ((minor !== 'a' && minor !== 'b' && minor !== 'y') || salt.charAt(3) !== '$') {\n                err = Error(\"Invalid salt revision: \"+salt.substring(2,4));\n                if (callback) {\n                    nextTick(callback.bind(this, err));\n                    return;\n                } else\n                    throw err;\n            }\n            offset = 4;\n        }\n\n        // Extract number of rounds\n        if (salt.charAt(offset + 2) > '$') {\n            err = Error(\"Missing salt rounds\");\n            if (callback) {\n                nextTick(callback.bind(this, err));\n                return;\n            } else\n                throw err;\n        }\n        var r1 = parseInt(salt.substring(offset, offset + 1), 10) * 10,\n            r2 = parseInt(salt.substring(offset + 1, offset + 2), 10),\n            rounds = r1 + r2,\n            real_salt = salt.substring(offset + 3, offset + 25);\n        s += minor >= 'a' ? \"\\x00\" : \"\";\n\n        var passwordb = stringToBytes(s),\n            saltb = base64_decode(real_salt, BCRYPT_SALT_LEN);\n\n        /**\n         * Finishes hashing.\n         * @param {Array.<number>} bytes Byte array\n         * @returns {string}\n         * @inner\n         */\n        function finish(bytes) {\n            var res = [];\n            res.push(\"$2\");\n            if (minor >= 'a')\n                res.push(minor);\n            res.push(\"$\");\n            if (rounds < 10)\n                res.push(\"0\");\n            res.push(rounds.toString());\n            res.push(\"$\");\n            res.push(base64_encode(saltb, saltb.length));\n            res.push(base64_encode(bytes, C_ORIG.length * 4 - 1));\n            return res.join('');\n        }\n\n        // Sync\n        if (typeof callback == 'undefined')\n            return finish(_crypt(passwordb, saltb, rounds));\n\n        // Async\n        else {\n            _crypt(passwordb, saltb, rounds, function(err, bytes) {\n                if (err)\n                    callback(err, null);\n                else\n                    callback(null, finish(bytes));\n            }, progressCallback);\n        }\n    }\n\n    /**\n     * Encodes a byte array to base64 with up to len bytes of input, using the custom bcrypt alphabet.\n     * @function\n     * @param {!Array.<number>} b Byte array\n     * @param {number} len Maximum input length\n     * @returns {string}\n     */\n    bcrypt.encodeBase64 = base64_encode;\n\n    /**\n     * Decodes a base64 encoded string to up to len bytes of output, using the custom bcrypt alphabet.\n     * @function\n     * @param {string} s String to decode\n     * @param {number} len Maximum output length\n     * @returns {!Array.<number>}\n     */\n    bcrypt.decodeBase64 = base64_decode;\n\n    return bcrypt;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmNyeXB0anMtcmVhY3QvZGlzdC9iY3J5cHQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RDtBQUM5RCxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixJQUE2QztBQUMvRCxRQUFRLGlDQUFPLEVBQUUsb0NBQUUsT0FBTztBQUFBO0FBQUE7QUFBQSxrR0FBQztBQUMzQix3QkFBd0IsRUFHb0Q7O0FBRTVFLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixpQkFBaUI7QUFDbEMsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUNBQW1DO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixRQUFRO0FBQ3pCLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RTtBQUM1RTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRCxlQUFlLG9DQUFvQztBQUNuRCxlQUFlLDJCQUEyQjtBQUMxQyxpQkFBaUIsVUFBVTtBQUMzQixnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxrQkFBa0I7QUFDakMsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLGVBQWU7QUFDOUIsZUFBZSwyQkFBMkI7QUFDMUMsZUFBZSxtQkFBbUI7QUFDbEM7QUFDQSxpQkFBaUIsVUFBVTtBQUMzQixnQkFBZ0IsT0FBTztBQUN2QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLFNBQVM7QUFDMUIsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLDJCQUEyQjtBQUMxQyxlQUFlLG1CQUFtQjtBQUNsQztBQUNBLGlCQUFpQixVQUFVO0FBQzNCLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsUUFBUTtBQUN6QixnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsUUFBUTtBQUN6QixnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0JBQWtCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsbUJBQW1CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxPQUFPO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxpQkFBaUI7QUFDaEMsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFVBQVU7QUFDaEM7QUFDQTtBQUNBOztBQUVBLHdDQUF3Qzs7QUFFeEM7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CLGVBQWUsUUFBUTtBQUN2QixlQUFlLGdCQUFnQjtBQUMvQixlQUFlLGdCQUFnQjtBQUMvQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSwrQ0FBK0MsS0FBSztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0IsZUFBZSxRQUFRO0FBQ3ZCLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsT0FBTztBQUN6QztBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCOztBQUVBO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0IsZUFBZSxnQkFBZ0I7QUFDL0IsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixVQUFVO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixVQUFVO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixVQUFVO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQixlQUFlLGdCQUFnQjtBQUMvQixlQUFlLGdCQUFnQjtBQUMvQixlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFVBQVU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsVUFBVTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsVUFBVTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0IsZUFBZSxnQkFBZ0I7QUFDL0IsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsbUNBQW1DO0FBQ2xEO0FBQ0EsZ0JBQWdCLG1CQUFtQjtBQUNuQyxpQkFBaUIsMkJBQTJCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLDBCQUEwQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixXQUFXO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCw0QkFBNEIsUUFBUTtBQUNwQyxnQ0FBZ0MsaUJBQWlCO0FBQ2pEO0FBQ0E7QUFDQSw0QkFBNEIsVUFBVTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFNBQVM7QUFDeEIsZUFBZSwyQkFBMkI7QUFDMUM7QUFDQSxnQkFBZ0IsbUJBQW1CO0FBQ25DLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsZ0JBQWdCO0FBQ25DLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQyxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c2MtYXBwLy4vbm9kZV9tb2R1bGVzL2JjcnlwdGpzLXJlYWN0L2Rpc3QvYmNyeXB0LmpzP2JiNmUiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiBDb3B5cmlnaHQgKGMpIDIwMTIgTmV2aW5zIEJhcnRvbG9tZW8gPG5ldmlucy5iYXJ0b2xvbWVvQGdtYWlsLmNvbT5cbiBDb3B5cmlnaHQgKGMpIDIwMTIgU2hhbmUgR2lyaXNoIDxzaGFuZUdpcmlzaEBnbWFpbC5jb20+XG4gQ29weXJpZ2h0IChjKSAyMDE0IERhbmllbCBXaXJ0eiA8ZGNvZGVAZGNvZGUuaW8+XG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnNcbiBhcmUgbWV0OlxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gMy4gVGhlIG5hbWUgb2YgdGhlIGF1dGhvciBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBBVVRIT1IgYGBBUyBJUycnIEFORCBBTlkgRVhQUkVTUyBPUlxuIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVNcbiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELlxuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVRcbiBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsXG4gREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZXG4gVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRlxuIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuLyoqXG4gKiBAbGljZW5zZSBiY3J5cHQuanMgKGMpIDIwMTMgRGFuaWVsIFdpcnR6IDxkY29kZUBkY29kZS5pbz5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjBcbiAqIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Rjb2RlSU8vYmNyeXB0LmpzIGZvciBkZXRhaWxzXG4gKi9cbihmdW5jdGlvbihnbG9iYWwsIGZhY3RvcnkpIHtcblxuICAgIC8qIEFNRCAqLyBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbXCJhbWRcIl0pXG4gICAgICAgIGRlZmluZShbXSwgZmFjdG9yeSk7XG4gICAgLyogQ29tbW9uSlMgKi8gZWxzZSBpZiAodHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiBtb2R1bGUgJiYgbW9kdWxlW1wiZXhwb3J0c1wiXSlcbiAgICAgICAgbW9kdWxlW1wiZXhwb3J0c1wiXSA9IGZhY3RvcnkoKTtcbiAgICAvKiBHbG9iYWwgKi8gZWxzZVxuICAgICAgICAoZ2xvYmFsW1wiZGNvZGVJT1wiXSA9IGdsb2JhbFtcImRjb2RlSU9cIl0gfHwge30pW1wiYmNyeXB0XCJdID0gZmFjdG9yeSgpO1xuXG59KHRoaXMsIGZ1bmN0aW9uKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgLyoqXG4gICAgICogYmNyeXB0IG5hbWVzcGFjZS5cbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsKj59XG4gICAgICovXG4gICAgdmFyIGJjcnlwdCA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJhbmRvbSBpbXBsZW1lbnRhdGlvbiB0byB1c2UgYXMgYSBmYWxsYmFjay5cbiAgICAgKiBAdHlwZSB7P2Z1bmN0aW9uKG51bWJlcik6IUFycmF5LjxudW1iZXI+fVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIHZhciByYW5kb21GYWxsYmFjayA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgY3J5cHRvZ3JhcGhpY2FsbHkgc2VjdXJlIHJhbmRvbSBieXRlcy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuIEJ5dGVzIGxlbmd0aFxuICAgICAqIEByZXR1cm5zIHshQXJyYXkuPG51bWJlcj59IFJhbmRvbSBieXRlc1xuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBubyByYW5kb20gaW1wbGVtZW50YXRpb24gaXMgYXZhaWxhYmxlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZG9tKGxlbikge1xuXG4gICAgICAgIC8qIFdDQSAqLyB0cnkge1xuICAgICAgICAgICAgdmFyIGE7IChzZWxmWydjcnlwdG8nXXx8c2VsZlsnbXNDcnlwdG8nXSlbJ2dldFJhbmRvbVZhbHVlcyddKGEgPSBuZXcgVWludDMyQXJyYXkobGVuKSk7XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIC8qIGZhbGxiYWNrICovIGlmICghcmFuZG9tRmFsbGJhY2spXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIk5laXRoZXIgV2ViQ3J5cHRvQVBJIG5vciBhIGNyeXB0byBtb2R1bGUgaXMgYXZhaWxhYmxlLiBVc2UgYmNyeXB0LnNldFJhbmRvbUZhbGxiYWNrIHRvIHNldCBhbiBhbHRlcm5hdGl2ZVwiKTtcbiAgICAgICAgcmV0dXJuIHJhbmRvbUZhbGxiYWNrKGxlbik7XG4gICAgfVxuXG4gICAgLy8gVGVzdCBpZiBhbnkgc2VjdXJlIHJhbmRvbW5lc3Mgc291cmNlIGlzIGF2YWlsYWJsZVxuICAgIHZhciByYW5kb21BdmFpbGFibGUgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICByYW5kb20oMSk7XG4gICAgICAgIHJhbmRvbUF2YWlsYWJsZSA9IHRydWU7XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIC8vIERlZmF1bHQgZmFsbGJhY2ssIGlmIGFueVxuICAgIHJhbmRvbUZhbGxiYWNrID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwc2V1ZG8gcmFuZG9tIG51bWJlciBnZW5lcmF0b3IgdG8gdXNlIGFzIGEgZmFsbGJhY2sgaWYgbmVpdGhlciBub2RlJ3MgYGNyeXB0b2AgbW9kdWxlIG5vciB0aGUgV2ViIENyeXB0b1xuICAgICAqICBBUEkgaXMgYXZhaWxhYmxlLiBQbGVhc2Ugbm90ZTogSXQgaXMgaGlnaGx5IGltcG9ydGFudCB0aGF0IHRoZSBQUk5HIHVzZWQgaXMgY3J5cHRvZ3JhcGhpY2FsbHkgc2VjdXJlIGFuZCB0aGF0IGl0XG4gICAgICogIGlzIHNlZWRlZCBwcm9wZXJseSFcbiAgICAgKiBAcGFyYW0gez9mdW5jdGlvbihudW1iZXIpOiFBcnJheS48bnVtYmVyPn0gcmFuZG9tIEZ1bmN0aW9uIHRha2luZyB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRvIGdlbmVyYXRlIGFzIGl0c1xuICAgICAqICBzb2xlIGFyZ3VtZW50LCByZXR1cm5pbmcgdGhlIGNvcnJlc3BvbmRpbmcgYXJyYXkgb2YgY3J5cHRvZ3JhcGhpY2FsbHkgc2VjdXJlIHJhbmRvbSBieXRlIHZhbHVlcy5cbiAgICAgKiBAc2VlIGh0dHA6Ly9ub2RlanMub3JnL2FwaS9jcnlwdG8uaHRtbFxuICAgICAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvV2ViQ3J5cHRvQVBJL1xuICAgICAqL1xuICAgIGJjcnlwdC5zZXRSYW5kb21GYWxsYmFjayA9IGZ1bmN0aW9uKHJhbmRvbSkge1xuICAgICAgICByYW5kb21GYWxsYmFjayA9IHJhbmRvbTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3luY2hyb25vdXNseSBnZW5lcmF0ZXMgYSBzYWx0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gcm91bmRzIE51bWJlciBvZiByb3VuZHMgdG8gdXNlLCBkZWZhdWx0cyB0byAxMCBpZiBvbWl0dGVkXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBzZWVkX2xlbmd0aCBOb3Qgc3VwcG9ydGVkLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJlc3VsdGluZyBzYWx0XG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIGEgcmFuZG9tIGZhbGxiYWNrIGlzIHJlcXVpcmVkIGJ1dCBub3Qgc2V0XG4gICAgICovXG4gICAgYmNyeXB0LmdlblNhbHRTeW5jID0gZnVuY3Rpb24ocm91bmRzLCBzZWVkX2xlbmd0aCkge1xuICAgICAgICByb3VuZHMgPSByb3VuZHMgfHwgR0VOU0FMVF9ERUZBVUxUX0xPRzJfUk9VTkRTO1xuICAgICAgICBpZiAodHlwZW9mIHJvdW5kcyAhPT0gJ251bWJlcicpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIklsbGVnYWwgYXJndW1lbnRzOiBcIisodHlwZW9mIHJvdW5kcykrXCIsIFwiKyh0eXBlb2Ygc2VlZF9sZW5ndGgpKTtcbiAgICAgICAgaWYgKHJvdW5kcyA8IDQpXG4gICAgICAgICAgICByb3VuZHMgPSA0O1xuICAgICAgICBlbHNlIGlmIChyb3VuZHMgPiAzMSlcbiAgICAgICAgICAgIHJvdW5kcyA9IDMxO1xuICAgICAgICB2YXIgc2FsdCA9IFtdO1xuICAgICAgICBzYWx0LnB1c2goXCIkMmEkXCIpO1xuICAgICAgICBpZiAocm91bmRzIDwgMTApXG4gICAgICAgICAgICBzYWx0LnB1c2goXCIwXCIpO1xuICAgICAgICBzYWx0LnB1c2gocm91bmRzLnRvU3RyaW5nKCkpO1xuICAgICAgICBzYWx0LnB1c2goJyQnKTtcbiAgICAgICAgc2FsdC5wdXNoKGJhc2U2NF9lbmNvZGUocmFuZG9tKEJDUllQVF9TQUxUX0xFTiksIEJDUllQVF9TQUxUX0xFTikpOyAvLyBNYXkgdGhyb3dcbiAgICAgICAgcmV0dXJuIHNhbHQuam9pbignJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFzeW5jaHJvbm91c2x5IGdlbmVyYXRlcyBhIHNhbHQuXG4gICAgICogQHBhcmFtIHsobnVtYmVyfGZ1bmN0aW9uKEVycm9yLCBzdHJpbmc9KSk9fSByb3VuZHMgTnVtYmVyIG9mIHJvdW5kcyB0byB1c2UsIGRlZmF1bHRzIHRvIDEwIGlmIG9taXR0ZWRcbiAgICAgKiBAcGFyYW0geyhudW1iZXJ8ZnVuY3Rpb24oRXJyb3IsIHN0cmluZz0pKT19IHNlZWRfbGVuZ3RoIE5vdCBzdXBwb3J0ZWQuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihFcnJvciwgc3RyaW5nPSk9fSBjYWxsYmFjayBDYWxsYmFjayByZWNlaXZpbmcgdGhlIGVycm9yLCBpZiBhbnksIGFuZCB0aGUgcmVzdWx0aW5nIHNhbHRcbiAgICAgKiBAcmV0dXJucyB7IVByb21pc2V9IElmIGBjYWxsYmFja2AgaGFzIGJlZW4gb21pdHRlZFxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBgY2FsbGJhY2tgIGlzIHByZXNlbnQgYnV0IG5vdCBhIGZ1bmN0aW9uXG4gICAgICovXG4gICAgYmNyeXB0LmdlblNhbHQgPSBmdW5jdGlvbihyb3VuZHMsIHNlZWRfbGVuZ3RoLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIHNlZWRfbGVuZ3RoID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgY2FsbGJhY2sgPSBzZWVkX2xlbmd0aCxcbiAgICAgICAgICAgIHNlZWRfbGVuZ3RoID0gdW5kZWZpbmVkOyAvLyBOb3Qgc3VwcG9ydGVkLlxuICAgICAgICBpZiAodHlwZW9mIHJvdW5kcyA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGNhbGxiYWNrID0gcm91bmRzLFxuICAgICAgICAgICAgcm91bmRzID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodHlwZW9mIHJvdW5kcyA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICByb3VuZHMgPSBHRU5TQUxUX0RFRkFVTFRfTE9HMl9ST1VORFM7XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiByb3VuZHMgIT09ICdudW1iZXInKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJpbGxlZ2FsIGFyZ3VtZW50czogXCIrKHR5cGVvZiByb3VuZHMpKTtcblxuICAgICAgICBmdW5jdGlvbiBfYXN5bmMoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uKCkgeyAvLyBQcmV0dHkgdGhpbiwgYnV0IHNhbHRpbmcgaXMgZmFzdCBlbm91Z2hcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBiY3J5cHQuZ2VuU2FsdFN5bmMocm91bmRzKSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJJbGxlZ2FsIGNhbGxiYWNrOiBcIit0eXBlb2YoY2FsbGJhY2spKTtcbiAgICAgICAgICAgIF9hc3luYyhjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIF9hc3luYyhmdW5jdGlvbihlcnIsIHJlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3luY2hyb25vdXNseSBnZW5lcmF0ZXMgYSBoYXNoIGZvciB0aGUgZ2l2ZW4gc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzIFN0cmluZyB0byBoYXNoXG4gICAgICogQHBhcmFtIHsobnVtYmVyfHN0cmluZyk9fSBzYWx0IFNhbHQgbGVuZ3RoIHRvIGdlbmVyYXRlIG9yIHNhbHQgdG8gdXNlLCBkZWZhdWx0IHRvIDEwXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmVzdWx0aW5nIGhhc2hcbiAgICAgKi9cbiAgICBiY3J5cHQuaGFzaFN5bmMgPSBmdW5jdGlvbihzLCBzYWx0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2FsdCA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICBzYWx0ID0gR0VOU0FMVF9ERUZBVUxUX0xPRzJfUk9VTkRTO1xuICAgICAgICBpZiAodHlwZW9mIHNhbHQgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgc2FsdCA9IGJjcnlwdC5nZW5TYWx0U3luYyhzYWx0KTtcbiAgICAgICAgaWYgKHR5cGVvZiBzICE9PSAnc3RyaW5nJyB8fCB0eXBlb2Ygc2FsdCAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIklsbGVnYWwgYXJndW1lbnRzOiBcIisodHlwZW9mIHMpKycsICcrKHR5cGVvZiBzYWx0KSk7XG4gICAgICAgIHJldHVybiBfaGFzaChzLCBzYWx0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXN5bmNocm9ub3VzbHkgZ2VuZXJhdGVzIGEgaGFzaCBmb3IgdGhlIGdpdmVuIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcyBTdHJpbmcgdG8gaGFzaFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gc2FsdCBTYWx0IGxlbmd0aCB0byBnZW5lcmF0ZSBvciBzYWx0IHRvIHVzZVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIHN0cmluZz0pPX0gY2FsbGJhY2sgQ2FsbGJhY2sgcmVjZWl2aW5nIHRoZSBlcnJvciwgaWYgYW55LCBhbmQgdGhlIHJlc3VsdGluZyBoYXNoXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihudW1iZXIpPX0gcHJvZ3Jlc3NDYWxsYmFjayBDYWxsYmFjayBzdWNjZXNzaXZlbHkgY2FsbGVkIHdpdGggdGhlIHBlcmNlbnRhZ2Ugb2Ygcm91bmRzIGNvbXBsZXRlZFxuICAgICAqICAoMC4wIC0gMS4wKSwgbWF4aW1hbGx5IG9uY2UgcGVyIGBNQVhfRVhFQ1VUSU9OX1RJTUUgPSAxMDBgIG1zLlxuICAgICAqIEByZXR1cm5zIHshUHJvbWlzZX0gSWYgYGNhbGxiYWNrYCBoYXMgYmVlbiBvbWl0dGVkXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIGBjYWxsYmFja2AgaXMgcHJlc2VudCBidXQgbm90IGEgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBiY3J5cHQuaGFzaCA9IGZ1bmN0aW9uKHMsIHNhbHQsIGNhbGxiYWNrLCBwcm9ncmVzc0NhbGxiYWNrKSB7XG5cbiAgICAgICAgZnVuY3Rpb24gX2FzeW5jKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHMgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBzYWx0ID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICBiY3J5cHQuZ2VuU2FsdChzYWx0LCBmdW5jdGlvbihlcnIsIHNhbHQpIHtcbiAgICAgICAgICAgICAgICAgICAgX2hhc2gocywgc2FsdCwgY2FsbGJhY2ssIHByb2dyZXNzQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHMgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBzYWx0ID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICBfaGFzaChzLCBzYWx0LCBjYWxsYmFjaywgcHJvZ3Jlc3NDYWxsYmFjayk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgbmV4dFRpY2soY2FsbGJhY2suYmluZCh0aGlzLCBFcnJvcihcIklsbGVnYWwgYXJndW1lbnRzOiBcIisodHlwZW9mIHMpKycsICcrKHR5cGVvZiBzYWx0KSkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIklsbGVnYWwgY2FsbGJhY2s6IFwiK3R5cGVvZihjYWxsYmFjaykpO1xuICAgICAgICAgICAgX2FzeW5jKGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgX2FzeW5jKGZ1bmN0aW9uKGVyciwgcmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB0d28gc3RyaW5ncyBvZiB0aGUgc2FtZSBsZW5ndGggaW4gY29uc3RhbnQgdGltZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga25vd24gTXVzdCBiZSBvZiB0aGUgY29ycmVjdCBsZW5ndGhcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdW5rbm93biBNdXN0IGJlIHRoZSBzYW1lIGxlbmd0aCBhcyBga25vd25gXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FmZVN0cmluZ0NvbXBhcmUoa25vd24sIHVua25vd24pIHtcbiAgICAgICAgdmFyIGRpZmYgPSBrbm93bi5sZW5ndGggXiB1bmtub3duLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrbm93bi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgZGlmZiB8PSBrbm93bi5jaGFyQ29kZUF0KGkpIF4gdW5rbm93bi5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWZmID09PSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN5bmNocm9ub3VzbHkgdGVzdHMgYSBzdHJpbmcgYWdhaW5zdCBhIGhhc2guXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHMgU3RyaW5nIHRvIGNvbXBhcmVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaGFzaCBIYXNoIHRvIHRlc3QgYWdhaW5zdFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIG1hdGNoaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgYW4gYXJndW1lbnQgaXMgaWxsZWdhbFxuICAgICAqL1xuICAgIGJjcnlwdC5jb21wYXJlU3luYyA9IGZ1bmN0aW9uKHMsIGhhc2gpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzICE9PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBoYXNoICE9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJJbGxlZ2FsIGFyZ3VtZW50czogXCIrKHR5cGVvZiBzKSsnLCAnKyh0eXBlb2YgaGFzaCkpO1xuICAgICAgICBpZiAoaGFzaC5sZW5ndGggIT09IDYwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gc2FmZVN0cmluZ0NvbXBhcmUoYmNyeXB0Lmhhc2hTeW5jKHMsIGhhc2guc3Vic3RyKDAsIGhhc2gubGVuZ3RoLTMxKSksIGhhc2gpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBc3luY2hyb25vdXNseSBjb21wYXJlcyB0aGUgZ2l2ZW4gZGF0YSBhZ2FpbnN0IHRoZSBnaXZlbiBoYXNoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzIERhdGEgdG8gY29tcGFyZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoIERhdGEgdG8gYmUgY29tcGFyZWQgdG9cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEVycm9yLCBib29sZWFuKT19IGNhbGxiYWNrIENhbGxiYWNrIHJlY2VpdmluZyB0aGUgZXJyb3IsIGlmIGFueSwgb3RoZXJ3aXNlIHRoZSByZXN1bHRcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG51bWJlcik9fSBwcm9ncmVzc0NhbGxiYWNrIENhbGxiYWNrIHN1Y2Nlc3NpdmVseSBjYWxsZWQgd2l0aCB0aGUgcGVyY2VudGFnZSBvZiByb3VuZHMgY29tcGxldGVkXG4gICAgICogICgwLjAgLSAxLjApLCBtYXhpbWFsbHkgb25jZSBwZXIgYE1BWF9FWEVDVVRJT05fVElNRSA9IDEwMGAgbXMuXG4gICAgICogQHJldHVybnMgeyFQcm9taXNlfSBJZiBgY2FsbGJhY2tgIGhhcyBiZWVuIG9taXR0ZWRcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgYGNhbGxiYWNrYCBpcyBwcmVzZW50IGJ1dCBub3QgYSBmdW5jdGlvblxuICAgICAqL1xuICAgIGJjcnlwdC5jb21wYXJlID0gZnVuY3Rpb24ocywgaGFzaCwgY2FsbGJhY2ssIHByb2dyZXNzQ2FsbGJhY2spIHtcblxuICAgICAgICBmdW5jdGlvbiBfYXN5bmMoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcyAhPT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgaGFzaCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIG5leHRUaWNrKGNhbGxiYWNrLmJpbmQodGhpcywgRXJyb3IoXCJJbGxlZ2FsIGFyZ3VtZW50czogXCIrKHR5cGVvZiBzKSsnLCAnKyh0eXBlb2YgaGFzaCkpKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc2gubGVuZ3RoICE9PSA2MCkge1xuICAgICAgICAgICAgICAgIG5leHRUaWNrKGNhbGxiYWNrLmJpbmQodGhpcywgbnVsbCwgZmFsc2UpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiY3J5cHQuaGFzaChzLCBoYXNoLnN1YnN0cigwLCAyOSksIGZ1bmN0aW9uKGVyciwgY29tcCkge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBzYWZlU3RyaW5nQ29tcGFyZShjb21wLCBoYXNoKSk7XG4gICAgICAgICAgICB9LCBwcm9ncmVzc0NhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIklsbGVnYWwgY2FsbGJhY2s6IFwiK3R5cGVvZihjYWxsYmFjaykpO1xuICAgICAgICAgICAgX2FzeW5jKGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgX2FzeW5jKGZ1bmN0aW9uKGVyciwgcmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBudW1iZXIgb2Ygcm91bmRzIHVzZWQgdG8gZW5jcnlwdCB0aGUgc3BlY2lmaWVkIGhhc2guXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGhhc2ggSGFzaCB0byBleHRyYWN0IHRoZSB1c2VkIG51bWJlciBvZiByb3VuZHMgZnJvbVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IE51bWJlciBvZiByb3VuZHMgdXNlZFxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBgaGFzaGAgaXMgbm90IGEgc3RyaW5nXG4gICAgICovXG4gICAgYmNyeXB0LmdldFJvdW5kcyA9IGZ1bmN0aW9uKGhhc2gpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBoYXNoICE9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJJbGxlZ2FsIGFyZ3VtZW50czogXCIrKHR5cGVvZiBoYXNoKSk7XG4gICAgICAgIHJldHVybiBwYXJzZUludChoYXNoLnNwbGl0KFwiJFwiKVsyXSwgMTApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzYWx0IHBvcnRpb24gZnJvbSBhIGhhc2guIERvZXMgbm90IHZhbGlkYXRlIHRoZSBoYXNoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoIEhhc2ggdG8gZXh0cmFjdCB0aGUgc2FsdCBmcm9tXG4gICAgICogQHJldHVybnMge3N0cmluZ30gRXh0cmFjdGVkIHNhbHQgcGFydFxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBgaGFzaGAgaXMgbm90IGEgc3RyaW5nIG9yIG90aGVyd2lzZSBpbnZhbGlkXG4gICAgICovXG4gICAgYmNyeXB0LmdldFNhbHQgPSBmdW5jdGlvbihoYXNoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaGFzaCAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIklsbGVnYWwgYXJndW1lbnRzOiBcIisodHlwZW9mIGhhc2gpKTtcbiAgICAgICAgaWYgKGhhc2gubGVuZ3RoICE9PSA2MClcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiSWxsZWdhbCBoYXNoIGxlbmd0aDogXCIraGFzaC5sZW5ndGgrXCIgIT0gNjBcIik7XG4gICAgICAgIHJldHVybiBoYXNoLnN1YnN0cmluZygwLCAyOSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnRpbnVlcyB3aXRoIHRoZSBjYWxsYmFjayBvbiB0aGUgbmV4dCB0aWNrLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oLi4uWypdKX0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gZXhlY3V0ZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIHZhciBuZXh0VGljayA9IHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzICYmIHR5cGVvZiBwcm9jZXNzLm5leHRUaWNrID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gKHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicgPyBzZXRJbW1lZGlhdGUgOiBwcm9jZXNzLm5leHRUaWNrKVxuICAgICAgICA6IHNldFRpbWVvdXQ7XG5cbiAgICAvKiogQ2FsY3VsYXRlcyB0aGUgYnl0ZSBsZW5ndGggb2YgYSBzdHJpbmcgZW5jb2RlZCBhcyBVVEY4LiAqL1xuICAgIGZ1bmN0aW9uIHV0ZjhMZW5ndGgoc3RyaW5nKSB7XG4gICAgICB2YXIgbGVuID0gMCxcbiAgICAgICAgICBjID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgYyA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgIGlmIChjIDwgMTI4KVxuICAgICAgICAgICAgICBsZW4gKz0gMTtcbiAgICAgICAgICBlbHNlIGlmIChjIDwgMjA0OClcbiAgICAgICAgICAgICAgbGVuICs9IDI7XG4gICAgICAgICAgZWxzZSBpZiAoXG4gICAgICAgICAgICAoYyAgICAgICAgICAgICAgICAgICAgICAgICYgMHhGQzAwKSA9PT0gMHhEODAwICYmXG4gICAgICAgICAgICAoc3RyaW5nLmNoYXJDb2RlQXQoaSArIDEpICYgMHhGQzAwKSA9PT0gMHhEQzAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICsraTtcbiAgICAgICAgICAgICAgbGVuICs9IDQ7XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgIGxlbiArPSAzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxlbjtcbiAgICB9XG5cbiAgICAvKiogQ29udmVydHMgYSBzdHJpbmcgdG8gYW4gYXJyYXkgb2YgVVRGOCBieXRlcy4gKi9cbiAgICBmdW5jdGlvbiB1dGY4QXJyYXkoc3RyaW5nKSB7XG4gICAgICB2YXIgb2Zmc2V0ID0gMCxcbiAgICAgICAgICBjMSwgYzI7XG4gICAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KHV0ZjhMZW5ndGgoc3RyaW5nKSk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgayA9IHN0cmluZy5sZW5ndGg7IGkgPCBrOyArK2kpIHtcbiAgICAgICAgICBjMSA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgIGlmIChjMSA8IDEyOCkge1xuICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzE7XG4gICAgICAgICAgfSBlbHNlIGlmIChjMSA8IDIwNDgpIHtcbiAgICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDYgICAgICAgfCAxOTI7XG4gICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSAgICAgICAmIDYzIHwgMTI4O1xuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAoIGMxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmIDB4RkMwMCkgPT09IDB4RDgwMCAmJlxuICAgICAgICAgICAgKChjMiA9IHN0cmluZy5jaGFyQ29kZUF0KGkgKyAxKSkgJiAweEZDMDApID09PSAweERDMDBcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgYzEgPSAweDEwMDAwICsgKChjMSAmIDB4MDNGRikgPDwgMTApICsgKGMyICYgMHgwM0ZGKTtcbiAgICAgICAgICAgICAgKytpO1xuICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gMTggICAgICB8IDI0MDtcbiAgICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDEyICYgNjMgfCAxMjg7XG4gICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSA+PiA2ICAmIDYzIHwgMTI4O1xuICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgICAgICAgJiA2MyB8IDEyODtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gMTIgICAgICB8IDIyNDtcbiAgICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDYgICYgNjMgfCAxMjg7XG4gICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSAgICAgICAmIDYzIHwgMTI4O1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBidWZmZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBKYXZhU2NyaXB0IHN0cmluZyB0byBVVEY4IGJ5dGVzLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nXG4gICAgICogQHJldHVybnMgeyFBcnJheS48bnVtYmVyPn0gVVRGOCBieXRlc1xuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIHZhciBzdHJpbmdUb0J5dGVzID0gdXRmOEFycmF5O1xuXG4gICAgLy8gQSBiYXNlNjQgaW1wbGVtZW50YXRpb24gZm9yIHRoZSBiY3J5cHQgYWxnb3JpdGhtLiBUaGlzIGlzIHBhcnRseSBub24tc3RhbmRhcmQuXG5cbiAgICAvKipcbiAgICAgKiBiY3J5cHQncyBvd24gbm9uLXN0YW5kYXJkIGJhc2U2NCBkaWN0aW9uYXJ5LlxuICAgICAqIEB0eXBlIHshQXJyYXkuPHN0cmluZz59XG4gICAgICogQGNvbnN0XG4gICAgICogQGlubmVyXG4gICAgICoqL1xuICAgIHZhciBCQVNFNjRfQ09ERSA9IFwiLi9BQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OVwiLnNwbGl0KCcnKTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHshQXJyYXkuPG51bWJlcj59XG4gICAgICogQGNvbnN0XG4gICAgICogQGlubmVyXG4gICAgICoqL1xuICAgIHZhciBCQVNFNjRfSU5ERVggPSBbLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsXG4gICAgICAgIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSxcbiAgICAgICAgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIDAsXG4gICAgICAgIDEsIDU0LCA1NSwgNTYsIDU3LCA1OCwgNTksIDYwLCA2MSwgNjIsIDYzLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLFxuICAgICAgICAtMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksXG4gICAgICAgIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgMjgsIDI5LCAzMCxcbiAgICAgICAgMzEsIDMyLCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0LCA0NSwgNDYsIDQ3LFxuICAgICAgICA0OCwgNDksIDUwLCA1MSwgNTIsIDUzLCAtMSwgLTEsIC0xLCAtMSwgLTFdO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUgeyFmdW5jdGlvbiguLi5udW1iZXIpOnN0cmluZ31cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICB2YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgYSBieXRlIGFycmF5IHRvIGJhc2U2NCB3aXRoIHVwIHRvIGxlbiBieXRlcyBvZiBpbnB1dC5cbiAgICAgKiBAcGFyYW0geyFBcnJheS48bnVtYmVyPn0gYiBCeXRlIGFycmF5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbiBNYXhpbXVtIGlucHV0IGxlbmd0aFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZTY0X2VuY29kZShiLCBsZW4pIHtcbiAgICAgICAgdmFyIG9mZiA9IDAsXG4gICAgICAgICAgICBycyA9IFtdLFxuICAgICAgICAgICAgYzEsIGMyO1xuICAgICAgICBpZiAobGVuIDw9IDAgfHwgbGVuID4gYi5sZW5ndGgpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIklsbGVnYWwgbGVuOiBcIitsZW4pO1xuICAgICAgICB3aGlsZSAob2ZmIDwgbGVuKSB7XG4gICAgICAgICAgICBjMSA9IGJbb2ZmKytdICYgMHhmZjtcbiAgICAgICAgICAgIHJzLnB1c2goQkFTRTY0X0NPREVbKGMxID4+IDIpICYgMHgzZl0pO1xuICAgICAgICAgICAgYzEgPSAoYzEgJiAweDAzKSA8PCA0O1xuICAgICAgICAgICAgaWYgKG9mZiA+PSBsZW4pIHtcbiAgICAgICAgICAgICAgICBycy5wdXNoKEJBU0U2NF9DT0RFW2MxICYgMHgzZl0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYzIgPSBiW29mZisrXSAmIDB4ZmY7XG4gICAgICAgICAgICBjMSB8PSAoYzIgPj4gNCkgJiAweDBmO1xuICAgICAgICAgICAgcnMucHVzaChCQVNFNjRfQ09ERVtjMSAmIDB4M2ZdKTtcbiAgICAgICAgICAgIGMxID0gKGMyICYgMHgwZikgPDwgMjtcbiAgICAgICAgICAgIGlmIChvZmYgPj0gbGVuKSB7XG4gICAgICAgICAgICAgICAgcnMucHVzaChCQVNFNjRfQ09ERVtjMSAmIDB4M2ZdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGMyID0gYltvZmYrK10gJiAweGZmO1xuICAgICAgICAgICAgYzEgfD0gKGMyID4+IDYpICYgMHgwMztcbiAgICAgICAgICAgIHJzLnB1c2goQkFTRTY0X0NPREVbYzEgJiAweDNmXSk7XG4gICAgICAgICAgICBycy5wdXNoKEJBU0U2NF9DT0RFW2MyICYgMHgzZl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBycy5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWNvZGVzIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nIHRvIHVwIHRvIGxlbiBieXRlcyBvZiBvdXRwdXQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHMgU3RyaW5nIHRvIGRlY29kZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gTWF4aW11bSBvdXRwdXQgbGVuZ3RoXG4gICAgICogQHJldHVybnMgeyFBcnJheS48bnVtYmVyPn1cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlNjRfZGVjb2RlKHMsIGxlbikge1xuICAgICAgICB2YXIgb2ZmID0gMCxcbiAgICAgICAgICAgIHNsZW4gPSBzLmxlbmd0aCxcbiAgICAgICAgICAgIG9sZW4gPSAwLFxuICAgICAgICAgICAgcnMgPSBbXSxcbiAgICAgICAgICAgIGMxLCBjMiwgYzMsIGM0LCBvLCBjb2RlO1xuICAgICAgICBpZiAobGVuIDw9IDApXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIklsbGVnYWwgbGVuOiBcIitsZW4pO1xuICAgICAgICB3aGlsZSAob2ZmIDwgc2xlbiAtIDEgJiYgb2xlbiA8IGxlbikge1xuICAgICAgICAgICAgY29kZSA9IHMuY2hhckNvZGVBdChvZmYrKyk7XG4gICAgICAgICAgICBjMSA9IGNvZGUgPCBCQVNFNjRfSU5ERVgubGVuZ3RoID8gQkFTRTY0X0lOREVYW2NvZGVdIDogLTE7XG4gICAgICAgICAgICBjb2RlID0gcy5jaGFyQ29kZUF0KG9mZisrKTtcbiAgICAgICAgICAgIGMyID0gY29kZSA8IEJBU0U2NF9JTkRFWC5sZW5ndGggPyBCQVNFNjRfSU5ERVhbY29kZV0gOiAtMTtcbiAgICAgICAgICAgIGlmIChjMSA9PSAtMSB8fCBjMiA9PSAtMSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIG8gPSAoYzEgPDwgMikgPj4+IDA7XG4gICAgICAgICAgICBvIHw9IChjMiAmIDB4MzApID4+IDQ7XG4gICAgICAgICAgICBycy5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShvKSk7XG4gICAgICAgICAgICBpZiAoKytvbGVuID49IGxlbiB8fCBvZmYgPj0gc2xlbilcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNvZGUgPSBzLmNoYXJDb2RlQXQob2ZmKyspO1xuICAgICAgICAgICAgYzMgPSBjb2RlIDwgQkFTRTY0X0lOREVYLmxlbmd0aCA/IEJBU0U2NF9JTkRFWFtjb2RlXSA6IC0xO1xuICAgICAgICAgICAgaWYgKGMzID09IC0xKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgbyA9ICgoYzIgJiAweDBmKSA8PCA0KSA+Pj4gMDtcbiAgICAgICAgICAgIG8gfD0gKGMzICYgMHgzYykgPj4gMjtcbiAgICAgICAgICAgIHJzLnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKG8pKTtcbiAgICAgICAgICAgIGlmICgrK29sZW4gPj0gbGVuIHx8IG9mZiA+PSBzbGVuKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY29kZSA9IHMuY2hhckNvZGVBdChvZmYrKyk7XG4gICAgICAgICAgICBjNCA9IGNvZGUgPCBCQVNFNjRfSU5ERVgubGVuZ3RoID8gQkFTRTY0X0lOREVYW2NvZGVdIDogLTE7XG4gICAgICAgICAgICBvID0gKChjMyAmIDB4MDMpIDw8IDYpID4+PiAwO1xuICAgICAgICAgICAgbyB8PSBjNDtcbiAgICAgICAgICAgIHJzLnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKG8pKTtcbiAgICAgICAgICAgICsrb2xlbjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzID0gW107XG4gICAgICAgIGZvciAob2ZmID0gMDsgb2ZmPG9sZW47IG9mZisrKVxuICAgICAgICAgICAgcmVzLnB1c2gocnNbb2ZmXS5jaGFyQ29kZUF0KDApKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBEYXRlLm5vdyA9IERhdGUubm93IHx8IGZ1bmN0aW9uKCkgeyByZXR1cm4gK25ldyBEYXRlOyB9O1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAY29uc3RcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICB2YXIgQkNSWVBUX1NBTFRfTEVOID0gMTY7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBjb25zdFxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIHZhciBHRU5TQUxUX0RFRkFVTFRfTE9HMl9ST1VORFMgPSAxMDtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQGNvbnN0XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgdmFyIEJMT1dGSVNIX05VTV9ST1VORFMgPSAxNjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQGNvbnN0XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgdmFyIE1BWF9FWEVDVVRJT05fVElNRSA9IDEwMDtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheS48bnVtYmVyPn1cbiAgICAgKiBAY29uc3RcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICB2YXIgUF9PUklHID0gW1xuICAgICAgICAweDI0M2Y2YTg4LCAweDg1YTMwOGQzLCAweDEzMTk4YTJlLCAweDAzNzA3MzQ0LCAweGE0MDkzODIyLFxuICAgICAgICAweDI5OWYzMWQwLCAweDA4MmVmYTk4LCAweGVjNGU2Yzg5LCAweDQ1MjgyMWU2LCAweDM4ZDAxMzc3LFxuICAgICAgICAweGJlNTQ2NmNmLCAweDM0ZTkwYzZjLCAweGMwYWMyOWI3LCAweGM5N2M1MGRkLCAweDNmODRkNWI1LFxuICAgICAgICAweGI1NDcwOTE3LCAweDkyMTZkNWQ5LCAweDg5NzlmYjFiXG4gICAgXTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheS48bnVtYmVyPn1cbiAgICAgKiBAY29uc3RcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICB2YXIgU19PUklHID0gW1xuICAgICAgICAweGQxMzEwYmE2LCAweDk4ZGZiNWFjLCAweDJmZmQ3MmRiLCAweGQwMWFkZmI3LCAweGI4ZTFhZmVkLFxuICAgICAgICAweDZhMjY3ZTk2LCAweGJhN2M5MDQ1LCAweGYxMmM3Zjk5LCAweDI0YTE5OTQ3LCAweGIzOTE2Y2Y3LFxuICAgICAgICAweDA4MDFmMmUyLCAweDg1OGVmYzE2LCAweDYzNjkyMGQ4LCAweDcxNTc0ZTY5LCAweGE0NThmZWEzLFxuICAgICAgICAweGY0OTMzZDdlLCAweDBkOTU3NDhmLCAweDcyOGViNjU4LCAweDcxOGJjZDU4LCAweDgyMTU0YWVlLFxuICAgICAgICAweDdiNTRhNDFkLCAweGMyNWE1OWI1LCAweDljMzBkNTM5LCAweDJhZjI2MDEzLCAweGM1ZDFiMDIzLFxuICAgICAgICAweDI4NjA4NWYwLCAweGNhNDE3OTE4LCAweGI4ZGIzOGVmLCAweDhlNzlkY2IwLCAweDYwM2ExODBlLFxuICAgICAgICAweDZjOWUwZThiLCAweGIwMWU4YTNlLCAweGQ3MTU3N2MxLCAweGJkMzE0YjI3LCAweDc4YWYyZmRhLFxuICAgICAgICAweDU1NjA1YzYwLCAweGU2NTUyNWYzLCAweGFhNTVhYjk0LCAweDU3NDg5ODYyLCAweDYzZTgxNDQwLFxuICAgICAgICAweDU1Y2EzOTZhLCAweDJhYWIxMGI2LCAweGI0Y2M1YzM0LCAweDExNDFlOGNlLCAweGExNTQ4NmFmLFxuICAgICAgICAweDdjNzJlOTkzLCAweGIzZWUxNDExLCAweDYzNmZiYzJhLCAweDJiYTljNTVkLCAweDc0MTgzMWY2LFxuICAgICAgICAweGNlNWMzZTE2LCAweDliODc5MzFlLCAweGFmZDZiYTMzLCAweDZjMjRjZjVjLCAweDdhMzI1MzgxLFxuICAgICAgICAweDI4OTU4Njc3LCAweDNiOGY0ODk4LCAweDZiNGJiOWFmLCAweGM0YmZlODFiLCAweDY2MjgyMTkzLFxuICAgICAgICAweDYxZDgwOWNjLCAweGZiMjFhOTkxLCAweDQ4N2NhYzYwLCAweDVkZWM4MDMyLCAweGVmODQ1ZDVkLFxuICAgICAgICAweGU5ODU3NWIxLCAweGRjMjYyMzAyLCAweGViNjUxYjg4LCAweDIzODkzZTgxLCAweGQzOTZhY2M1LFxuICAgICAgICAweDBmNmQ2ZmYzLCAweDgzZjQ0MjM5LCAweDJlMGI0NDgyLCAweGE0ODQyMDA0LCAweDY5YzhmMDRhLFxuICAgICAgICAweDllMWY5YjVlLCAweDIxYzY2ODQyLCAweGY2ZTk2YzlhLCAweDY3MGM5YzYxLCAweGFiZDM4OGYwLFxuICAgICAgICAweDZhNTFhMGQyLCAweGQ4NTQyZjY4LCAweDk2MGZhNzI4LCAweGFiNTEzM2EzLCAweDZlZWYwYjZjLFxuICAgICAgICAweDEzN2EzYmU0LCAweGJhM2JmMDUwLCAweDdlZmIyYTk4LCAweGExZjE2NTFkLCAweDM5YWYwMTc2LFxuICAgICAgICAweDY2Y2E1OTNlLCAweDgyNDMwZTg4LCAweDhjZWU4NjE5LCAweDQ1NmY5ZmI0LCAweDdkODRhNWMzLFxuICAgICAgICAweDNiOGI1ZWJlLCAweGUwNmY3NWQ4LCAweDg1YzEyMDczLCAweDQwMWE0NDlmLCAweDU2YzE2YWE2LFxuICAgICAgICAweDRlZDNhYTYyLCAweDM2M2Y3NzA2LCAweDFiZmVkZjcyLCAweDQyOWIwMjNkLCAweDM3ZDBkNzI0LFxuICAgICAgICAweGQwMGExMjQ4LCAweGRiMGZlYWQzLCAweDQ5ZjFjMDliLCAweDA3NTM3MmM5LCAweDgwOTkxYjdiLFxuICAgICAgICAweDI1ZDQ3OWQ4LCAweGY2ZThkZWY3LCAweGUzZmU1MDFhLCAweGI2Nzk0YzNiLCAweDk3NmNlMGJkLFxuICAgICAgICAweDA0YzAwNmJhLCAweGMxYTk0ZmI2LCAweDQwOWY2MGM0LCAweDVlNWM5ZWMyLCAweDE5NmEyNDYzLFxuICAgICAgICAweDY4ZmI2ZmFmLCAweDNlNmM1M2I1LCAweDEzMzliMmViLCAweDNiNTJlYzZmLCAweDZkZmM1MTFmLFxuICAgICAgICAweDliMzA5NTJjLCAweGNjODE0NTQ0LCAweGFmNWViZDA5LCAweGJlZTNkMDA0LCAweGRlMzM0YWZkLFxuICAgICAgICAweDY2MGYyODA3LCAweDE5MmU0YmIzLCAweGMwY2JhODU3LCAweDQ1Yzg3NDBmLCAweGQyMGI1ZjM5LFxuICAgICAgICAweGI5ZDNmYmRiLCAweDU1NzljMGJkLCAweDFhNjAzMjBhLCAweGQ2YTEwMGM2LCAweDQwMmM3Mjc5LFxuICAgICAgICAweDY3OWYyNWZlLCAweGZiMWZhM2NjLCAweDhlYTVlOWY4LCAweGRiMzIyMmY4LCAweDNjNzUxNmRmLFxuICAgICAgICAweGZkNjE2YjE1LCAweDJmNTAxZWM4LCAweGFkMDU1MmFiLCAweDMyM2RiNWZhLCAweGZkMjM4NzYwLFxuICAgICAgICAweDUzMzE3YjQ4LCAweDNlMDBkZjgyLCAweDllNWM1N2JiLCAweGNhNmY4Y2EwLCAweDFhODc1NjJlLFxuICAgICAgICAweGRmMTc2OWRiLCAweGQ1NDJhOGY2LCAweDI4N2VmZmMzLCAweGFjNjczMmM2LCAweDhjNGY1NTczLFxuICAgICAgICAweDY5NWIyN2IwLCAweGJiY2E1OGM4LCAweGUxZmZhMzVkLCAweGI4ZjAxMWEwLCAweDEwZmEzZDk4LFxuICAgICAgICAweGZkMjE4M2I4LCAweDRhZmNiNTZjLCAweDJkZDFkMzViLCAweDlhNTNlNDc5LCAweGI2Zjg0NTY1LFxuICAgICAgICAweGQyOGU0OWJjLCAweDRiZmI5NzkwLCAweGUxZGRmMmRhLCAweGE0Y2I3ZTMzLCAweDYyZmIxMzQxLFxuICAgICAgICAweGNlZTRjNmU4LCAweGVmMjBjYWRhLCAweDM2Nzc0YzAxLCAweGQwN2U5ZWZlLCAweDJiZjExZmI0LFxuICAgICAgICAweDk1ZGJkYTRkLCAweGFlOTA5MTk4LCAweGVhYWQ4ZTcxLCAweDZiOTNkNWEwLCAweGQwOGVkMWQwLFxuICAgICAgICAweGFmYzcyNWUwLCAweDhlM2M1YjJmLCAweDhlNzU5NGI3LCAweDhmZjZlMmZiLCAweGYyMTIyYjY0LFxuICAgICAgICAweDg4ODhiODEyLCAweDkwMGRmMDFjLCAweDRmYWQ1ZWEwLCAweDY4OGZjMzFjLCAweGQxY2ZmMTkxLFxuICAgICAgICAweGIzYThjMWFkLCAweDJmMmYyMjE4LCAweGJlMGUxNzc3LCAweGVhNzUyZGZlLCAweDhiMDIxZmExLFxuICAgICAgICAweGU1YTBjYzBmLCAweGI1NmY3NGU4LCAweDE4YWNmM2Q2LCAweGNlODllMjk5LCAweGI0YTg0ZmUwLFxuICAgICAgICAweGZkMTNlMGI3LCAweDdjYzQzYjgxLCAweGQyYWRhOGQ5LCAweDE2NWZhMjY2LCAweDgwOTU3NzA1LFxuICAgICAgICAweDkzY2M3MzE0LCAweDIxMWExNDc3LCAweGU2YWQyMDY1LCAweDc3YjVmYTg2LCAweGM3NTQ0MmY1LFxuICAgICAgICAweGZiOWQzNWNmLCAweGViY2RhZjBjLCAweDdiM2U4OWEwLCAweGQ2NDExYmQzLCAweGFlMWU3ZTQ5LFxuICAgICAgICAweDAwMjUwZTJkLCAweDIwNzFiMzVlLCAweDIyNjgwMGJiLCAweDU3YjhlMGFmLCAweDI0NjQzNjliLFxuICAgICAgICAweGYwMDliOTFlLCAweDU1NjM5MTFkLCAweDU5ZGZhNmFhLCAweDc4YzE0Mzg5LCAweGQ5NWE1MzdmLFxuICAgICAgICAweDIwN2Q1YmEyLCAweDAyZTViOWM1LCAweDgzMjYwMzc2LCAweDYyOTVjZmE5LCAweDExYzgxOTY4LFxuICAgICAgICAweDRlNzM0YTQxLCAweGIzNDcyZGNhLCAweDdiMTRhOTRhLCAweDFiNTEwMDUyLCAweDlhNTMyOTE1LFxuICAgICAgICAweGQ2MGY1NzNmLCAweGJjOWJjNmU0LCAweDJiNjBhNDc2LCAweDgxZTY3NDAwLCAweDA4YmE2ZmI1LFxuICAgICAgICAweDU3MWJlOTFmLCAweGYyOTZlYzZiLCAweDJhMGRkOTE1LCAweGI2NjM2NTIxLCAweGU3YjlmOWI2LFxuICAgICAgICAweGZmMzQwNTJlLCAweGM1ODU1NjY0LCAweDUzYjAyZDVkLCAweGE5OWY4ZmExLCAweDA4YmE0Nzk5LFxuICAgICAgICAweDZlODUwNzZhLCAweDRiN2E3MGU5LCAweGI1YjMyOTQ0LCAweGRiNzUwOTJlLCAweGM0MTkyNjIzLFxuICAgICAgICAweGFkNmVhNmIwLCAweDQ5YTdkZjdkLCAweDljZWU2MGI4LCAweDhmZWRiMjY2LCAweGVjYWE4YzcxLFxuICAgICAgICAweDY5OWExN2ZmLCAweDU2NjQ1MjZjLCAweGMyYjE5ZWUxLCAweDE5MzYwMmE1LCAweDc1MDk0YzI5LFxuICAgICAgICAweGEwNTkxMzQwLCAweGU0MTgzYTNlLCAweDNmNTQ5ODlhLCAweDViNDI5ZDY1LCAweDZiOGZlNGQ2LFxuICAgICAgICAweDk5ZjczZmQ2LCAweGExZDI5YzA3LCAweGVmZTgzMGY1LCAweDRkMmQzOGU2LCAweGYwMjU1ZGMxLFxuICAgICAgICAweDRjZGQyMDg2LCAweDg0NzBlYjI2LCAweDYzODJlOWM2LCAweDAyMWVjYzVlLCAweDA5Njg2YjNmLFxuICAgICAgICAweDNlYmFlZmM5LCAweDNjOTcxODE0LCAweDZiNmE3MGExLCAweDY4N2YzNTg0LCAweDUyYTBlMjg2LFxuICAgICAgICAweGI3OWM1MzA1LCAweGFhNTAwNzM3LCAweDNlMDc4NDFjLCAweDdmZGVhZTVjLCAweDhlN2Q0NGVjLFxuICAgICAgICAweDU3MTZmMmI4LCAweGIwM2FkYTM3LCAweGYwNTAwYzBkLCAweGYwMWMxZjA0LCAweDAyMDBiM2ZmLFxuICAgICAgICAweGFlMGNmNTFhLCAweDNjYjU3NGIyLCAweDI1ODM3YTU4LCAweGRjMDkyMWJkLCAweGQxOTExM2Y5LFxuICAgICAgICAweDdjYTkyZmY2LCAweDk0MzI0NzczLCAweDIyZjU0NzAxLCAweDNhZTVlNTgxLCAweDM3YzJkYWRjLFxuICAgICAgICAweGM4YjU3NjM0LCAweDlhZjNkZGE3LCAweGE5NDQ2MTQ2LCAweDBmZDAwMzBlLCAweGVjYzhjNzNlLFxuICAgICAgICAweGE0NzUxZTQxLCAweGUyMzhjZDk5LCAweDNiZWEwZTJmLCAweDMyODBiYmExLCAweDE4M2ViMzMxLFxuICAgICAgICAweDRlNTQ4YjM4LCAweDRmNmRiOTA4LCAweDZmNDIwZDAzLCAweGY2MGEwNGJmLCAweDJjYjgxMjkwLFxuICAgICAgICAweDI0OTc3Yzc5LCAweDU2NzliMDcyLCAweGJjYWY4OWFmLCAweGRlOWE3NzFmLCAweGQ5OTMwODEwLFxuICAgICAgICAweGIzOGJhZTEyLCAweGRjY2YzZjJlLCAweDU1MTI3MjFmLCAweDJlNmI3MTI0LCAweDUwMWFkZGU2LFxuICAgICAgICAweDlmODRjZDg3LCAweDdhNTg0NzE4LCAweDc0MDhkYTE3LCAweGJjOWY5YWJjLCAweGU5NGI3ZDhjLFxuICAgICAgICAweGVjN2FlYzNhLCAweGRiODUxZGZhLCAweDYzMDk0MzY2LCAweGM0NjRjM2QyLCAweGVmMWMxODQ3LFxuICAgICAgICAweDMyMTVkOTA4LCAweGRkNDMzYjM3LCAweDI0YzJiYTE2LCAweDEyYTE0ZDQzLCAweDJhNjVjNDUxLFxuICAgICAgICAweDUwOTQwMDAyLCAweDEzM2FlNGRkLCAweDcxZGZmODllLCAweDEwMzE0ZTU1LCAweDgxYWM3N2Q2LFxuICAgICAgICAweDVmMTExOTliLCAweDA0MzU1NmYxLCAweGQ3YTNjNzZiLCAweDNjMTExODNiLCAweDU5MjRhNTA5LFxuICAgICAgICAweGYyOGZlNmVkLCAweDk3ZjFmYmZhLCAweDllYmFiZjJjLCAweDFlMTUzYzZlLCAweDg2ZTM0NTcwLFxuICAgICAgICAweGVhZTk2ZmIxLCAweDg2MGU1ZTBhLCAweDVhM2UyYWIzLCAweDc3MWZlNzFjLCAweDRlM2QwNmZhLFxuICAgICAgICAweDI5NjVkY2I5LCAweDk5ZTcxZDBmLCAweDgwM2U4OWQ2LCAweDUyNjZjODI1LCAweDJlNGNjOTc4LFxuICAgICAgICAweDljMTBiMzZhLCAweGM2MTUwZWJhLCAweDk0ZTJlYTc4LCAweGE1ZmMzYzUzLCAweDFlMGEyZGY0LFxuICAgICAgICAweGYyZjc0ZWE3LCAweDM2MWQyYjNkLCAweDE5MzkyNjBmLCAweDE5YzI3OTYwLCAweDUyMjNhNzA4LFxuICAgICAgICAweGY3MTMxMmI2LCAweGViYWRmZTZlLCAweGVhYzMxZjY2LCAweGUzYmM0NTk1LCAweGE2N2JjODgzLFxuICAgICAgICAweGIxN2YzN2QxLCAweDAxOGNmZjI4LCAweGMzMzJkZGVmLCAweGJlNmM1YWE1LCAweDY1NTgyMTg1LFxuICAgICAgICAweDY4YWI5ODAyLCAweGVlY2VhNTBmLCAweGRiMmY5NTNiLCAweDJhZWY3ZGFkLCAweDViNmUyZjg0LFxuICAgICAgICAweDE1MjFiNjI4LCAweDI5MDc2MTcwLCAweGVjZGQ0Nzc1LCAweDYxOWYxNTEwLCAweDEzY2NhODMwLFxuICAgICAgICAweGViNjFiZDk2LCAweDAzMzRmZTFlLCAweGFhMDM2M2NmLCAweGI1NzM1YzkwLCAweDRjNzBhMjM5LFxuICAgICAgICAweGQ1OWU5ZTBiLCAweGNiYWFkZTE0LCAweGVlY2M4NmJjLCAweDYwNjIyY2E3LCAweDljYWI1Y2FiLFxuICAgICAgICAweGIyZjM4NDZlLCAweDY0OGIxZWFmLCAweDE5YmRmMGNhLCAweGEwMjM2OWI5LCAweDY1NWFiYjUwLFxuICAgICAgICAweDQwNjg1YTMyLCAweDNjMmFiNGIzLCAweDMxOWVlOWQ1LCAweGMwMjFiOGY3LCAweDliNTQwYjE5LFxuICAgICAgICAweDg3NWZhMDk5LCAweDk1Zjc5OTdlLCAweDYyM2Q3ZGE4LCAweGY4Mzc4ODlhLCAweDk3ZTMyZDc3LFxuICAgICAgICAweDExZWQ5MzVmLCAweDE2NjgxMjgxLCAweDBlMzU4ODI5LCAweGM3ZTYxZmQ2LCAweDk2ZGVkZmExLFxuICAgICAgICAweDc4NThiYTk5LCAweDU3ZjU4NGE1LCAweDFiMjI3MjYzLCAweDliODNjM2ZmLCAweDFhYzI0Njk2LFxuICAgICAgICAweGNkYjMwYWViLCAweDUzMmUzMDU0LCAweDhmZDk0OGU0LCAweDZkYmMzMTI4LCAweDU4ZWJmMmVmLFxuICAgICAgICAweDM0YzZmZmVhLCAweGZlMjhlZDYxLCAweGVlN2MzYzczLCAweDVkNGExNGQ5LCAweGU4NjRiN2UzLFxuICAgICAgICAweDQyMTA1ZDE0LCAweDIwM2UxM2UwLCAweDQ1ZWVlMmI2LCAweGEzYWFhYmVhLCAweGRiNmM0ZjE1LFxuICAgICAgICAweGZhY2I0ZmQwLCAweGM3NDJmNDQyLCAweGVmNmFiYmI1LCAweDY1NGYzYjFkLCAweDQxY2QyMTA1LFxuICAgICAgICAweGQ4MWU3OTllLCAweDg2ODU0ZGM3LCAweGU0NGI0NzZhLCAweDNkODE2MjUwLCAweGNmNjJhMWYyLFxuICAgICAgICAweDViOGQyNjQ2LCAweGZjODg4M2EwLCAweGMxYzdiNmEzLCAweDdmMTUyNGMzLCAweDY5Y2I3NDkyLFxuICAgICAgICAweDQ3ODQ4YTBiLCAweDU2OTJiMjg1LCAweDA5NWJiZjAwLCAweGFkMTk0ODlkLCAweDE0NjJiMTc0LFxuICAgICAgICAweDIzODIwZTAwLCAweDU4NDI4ZDJhLCAweDBjNTVmNWVhLCAweDFkYWRmNDNlLCAweDIzM2Y3MDYxLFxuICAgICAgICAweDMzNzJmMDkyLCAweDhkOTM3ZTQxLCAweGQ2NWZlY2YxLCAweDZjMjIzYmRiLCAweDdjZGUzNzU5LFxuICAgICAgICAweGNiZWU3NDYwLCAweDQwODVmMmE3LCAweGNlNzczMjZlLCAweGE2MDc4MDg0LCAweDE5Zjg1MDllLFxuICAgICAgICAweGU4ZWZkODU1LCAweDYxZDk5NzM1LCAweGE5NjlhN2FhLCAweGM1MGMwNmMyLCAweDVhMDRhYmZjLFxuICAgICAgICAweDgwMGJjYWRjLCAweDllNDQ3YTJlLCAweGMzNDUzNDg0LCAweGZkZDU2NzA1LCAweDBlMWU5ZWM5LFxuICAgICAgICAweGRiNzNkYmQzLCAweDEwNTU4OGNkLCAweDY3NWZkYTc5LCAweGUzNjc0MzQwLCAweGM1YzQzNDY1LFxuICAgICAgICAweDcxM2UzOGQ4LCAweDNkMjhmODllLCAweGYxNmRmZjIwLCAweDE1M2UyMWU3LCAweDhmYjAzZDRhLFxuICAgICAgICAweGU2ZTM5ZjJiLCAweGRiODNhZGY3LCAweGU5M2Q1YTY4LCAweDk0ODE0MGY3LCAweGY2NGMyNjFjLFxuICAgICAgICAweDk0NjkyOTM0LCAweDQxMTUyMGY3LCAweDc2MDJkNGY3LCAweGJjZjQ2YjJlLCAweGQ0YTIwMDY4LFxuICAgICAgICAweGQ0MDgyNDcxLCAweDMzMjBmNDZhLCAweDQzYjdkNGI3LCAweDUwMDA2MWFmLCAweDFlMzlmNjJlLFxuICAgICAgICAweDk3MjQ0NTQ2LCAweDE0MjE0Zjc0LCAweGJmOGI4ODQwLCAweDRkOTVmYzFkLCAweDk2YjU5MWFmLFxuICAgICAgICAweDcwZjRkZGQzLCAweDY2YTAyZjQ1LCAweGJmYmMwOWVjLCAweDAzYmQ5Nzg1LCAweDdmYWM2ZGQwLFxuICAgICAgICAweDMxY2I4NTA0LCAweDk2ZWIyN2IzLCAweDU1ZmQzOTQxLCAweGRhMjU0N2U2LCAweGFiY2EwYTlhLFxuICAgICAgICAweDI4NTA3ODI1LCAweDUzMDQyOWY0LCAweDBhMmM4NmRhLCAweGU5YjY2ZGZiLCAweDY4ZGMxNDYyLFxuICAgICAgICAweGQ3NDg2OTAwLCAweDY4MGVjMGE0LCAweDI3YTE4ZGVlLCAweDRmM2ZmZWEyLCAweGU4ODdhZDhjLFxuICAgICAgICAweGI1OGNlMDA2LCAweDdhZjRkNmI2LCAweGFhY2UxZTdjLCAweGQzMzc1ZmVjLCAweGNlNzhhMzk5LFxuICAgICAgICAweDQwNmIyYTQyLCAweDIwZmU5ZTM1LCAweGQ5ZjM4NWI5LCAweGVlMzlkN2FiLCAweDNiMTI0ZThiLFxuICAgICAgICAweDFkYzlmYWY3LCAweDRiNmQxODU2LCAweDI2YTM2NjMxLCAweGVhZTM5N2IyLCAweDNhNmVmYTc0LFxuICAgICAgICAweGRkNWI0MzMyLCAweDY4NDFlN2Y3LCAweGNhNzgyMGZiLCAweGZiMGFmNTRlLCAweGQ4ZmViMzk3LFxuICAgICAgICAweDQ1NDA1NmFjLCAweGJhNDg5NTI3LCAweDU1NTMzYTNhLCAweDIwODM4ZDg3LCAweGZlNmJhOWI3LFxuICAgICAgICAweGQwOTY5NTRiLCAweDU1YTg2N2JjLCAweGExMTU5YTU4LCAweGNjYTkyOTYzLCAweDk5ZTFkYjMzLFxuICAgICAgICAweGE2MmE0YTU2LCAweDNmMzEyNWY5LCAweDVlZjQ3ZTFjLCAweDkwMjkzMTdjLCAweGZkZjhlODAyLFxuICAgICAgICAweDA0MjcyZjcwLCAweDgwYmIxNTVjLCAweDA1MjgyY2UzLCAweDk1YzExNTQ4LCAweGU0YzY2ZDIyLFxuICAgICAgICAweDQ4YzExMzNmLCAweGM3MGY4NmRjLCAweDA3ZjljOWVlLCAweDQxMDQxZjBmLCAweDQwNDc3OWE0LFxuICAgICAgICAweDVkODg2ZTE3LCAweDMyNWY1MWViLCAweGQ1OWJjMGQxLCAweGYyYmNjMThmLCAweDQxMTEzNTY0LFxuICAgICAgICAweDI1N2I3ODM0LCAweDYwMmE5YzYwLCAweGRmZjhlOGEzLCAweDFmNjM2YzFiLCAweDBlMTJiNGMyLFxuICAgICAgICAweDAyZTEzMjllLCAweGFmNjY0ZmQxLCAweGNhZDE4MTE1LCAweDZiMjM5NWUwLCAweDMzM2U5MmUxLFxuICAgICAgICAweDNiMjQwYjYyLCAweGVlYmViOTIyLCAweDg1YjJhMjBlLCAweGU2YmEwZDk5LCAweGRlNzIwYzhjLFxuICAgICAgICAweDJkYTJmNzI4LCAweGQwMTI3ODQ1LCAweDk1Yjc5NGZkLCAweDY0N2QwODYyLCAweGU3Y2NmNWYwLFxuICAgICAgICAweDU0NDlhMzZmLCAweDg3N2Q0OGZhLCAweGMzOWRmZDI3LCAweGYzM2U4ZDFlLCAweDBhNDc2MzQxLFxuICAgICAgICAweDk5MmVmZjc0LCAweDNhNmY2ZWFiLCAweGY0ZjhmZDM3LCAweGE4MTJkYzYwLCAweGExZWJkZGY4LFxuICAgICAgICAweDk5MWJlMTRjLCAweGRiNmU2YjBkLCAweGM2N2I1NTEwLCAweDZkNjcyYzM3LCAweDI3NjVkNDNiLFxuICAgICAgICAweGRjZDBlODA0LCAweGYxMjkwZGM3LCAweGNjMDBmZmEzLCAweGI1MzkwZjkyLCAweDY5MGZlZDBiLFxuICAgICAgICAweDY2N2I5ZmZiLCAweGNlZGI3ZDljLCAweGEwOTFjZjBiLCAweGQ5MTU1ZWEzLCAweGJiMTMyZjg4LFxuICAgICAgICAweDUxNWJhZDI0LCAweDdiOTQ3OWJmLCAweDc2M2JkNmViLCAweDM3MzkyZWIzLCAweGNjMTE1OTc5LFxuICAgICAgICAweDgwMjZlMjk3LCAweGY0MmUzMTJkLCAweDY4NDJhZGE3LCAweGM2NmEyYjNiLCAweDEyNzU0Y2NjLFxuICAgICAgICAweDc4MmVmMTFjLCAweDZhMTI0MjM3LCAweGI3OTI1MWU3LCAweDA2YTFiYmU2LCAweDRiZmI2MzUwLFxuICAgICAgICAweDFhNmIxMDE4LCAweDExY2FlZGZhLCAweDNkMjViZGQ4LCAweGUyZTFjM2M5LCAweDQ0NDIxNjU5LFxuICAgICAgICAweDBhMTIxMzg2LCAweGQ5MGNlYzZlLCAweGQ1YWJlYTJhLCAweDY0YWY2NzRlLCAweGRhODZhODVmLFxuICAgICAgICAweGJlYmZlOTg4LCAweDY0ZTRjM2ZlLCAweDlkYmM4MDU3LCAweGYwZjdjMDg2LCAweDYwNzg3YmY4LFxuICAgICAgICAweDYwMDM2MDRkLCAweGQxZmQ4MzQ2LCAweGY2MzgxZmIwLCAweDc3NDVhZTA0LCAweGQ3MzZmY2NjLFxuICAgICAgICAweDgzNDI2YjMzLCAweGYwMWVhYjcxLCAweGIwODA0MTg3LCAweDNjMDA1ZTVmLCAweDc3YTA1N2JlLFxuICAgICAgICAweGJkZThhZTI0LCAweDU1NDY0Mjk5LCAweGJmNTgyZTYxLCAweDRlNThmNDhmLCAweGYyZGRmZGEyLFxuICAgICAgICAweGY0NzRlZjM4LCAweDg3ODliZGMyLCAweDUzNjZmOWMzLCAweGM4YjM4ZTc0LCAweGI0NzVmMjU1LFxuICAgICAgICAweDQ2ZmNkOWI5LCAweDdhZWIyNjYxLCAweDhiMWRkZjg0LCAweDg0NmEwZTc5LCAweDkxNWY5NWUyLFxuICAgICAgICAweDQ2NmU1OThlLCAweDIwYjQ1NzcwLCAweDhjZDU1NTkxLCAweGM5MDJkZTRjLCAweGI5MGJhY2UxLFxuICAgICAgICAweGJiODIwNWQwLCAweDExYTg2MjQ4LCAweDc1NzRhOTllLCAweGI3N2YxOWI2LCAweGUwYTlkYzA5LFxuICAgICAgICAweDY2MmQwOWExLCAweGM0MzI0NjMzLCAweGU4NWExZjAyLCAweDA5ZjBiZThjLCAweDRhOTlhMDI1LFxuICAgICAgICAweDFkNmVmZTEwLCAweDFhYjkzZDFkLCAweDBiYTVhNGRmLCAweGExODZmMjBmLCAweDI4NjhmMTY5LFxuICAgICAgICAweGRjYjdkYTgzLCAweDU3MzkwNmZlLCAweGExZTJjZTliLCAweDRmY2Q3ZjUyLCAweDUwMTE1ZTAxLFxuICAgICAgICAweGE3MDY4M2ZhLCAweGEwMDJiNWM0LCAweDBkZTZkMDI3LCAweDlhZjg4YzI3LCAweDc3M2Y4NjQxLFxuICAgICAgICAweGMzNjA0YzA2LCAweDYxYTgwNmI1LCAweGYwMTc3YTI4LCAweGMwZjU4NmUwLCAweDAwNjA1OGFhLFxuICAgICAgICAweDMwZGM3ZDYyLCAweDExZTY5ZWQ3LCAweDIzMzhlYTYzLCAweDUzYzJkZDk0LCAweGMyYzIxNjM0LFxuICAgICAgICAweGJiY2JlZTU2LCAweDkwYmNiNmRlLCAweGViZmM3ZGExLCAweGNlNTkxZDc2LCAweDZmMDVlNDA5LFxuICAgICAgICAweDRiN2MwMTg4LCAweDM5NzIwYTNkLCAweDdjOTI3YzI0LCAweDg2ZTM3MjVmLCAweDcyNGQ5ZGI5LFxuICAgICAgICAweDFhYzE1YmI0LCAweGQzOWViOGZjLCAweGVkNTQ1NTc4LCAweDA4ZmNhNWI1LCAweGQ4M2Q3Y2QzLFxuICAgICAgICAweDRkYWQwZmM0LCAweDFlNTBlZjVlLCAweGIxNjFlNmY4LCAweGEyODUxNGQ5LCAweDZjNTExMzNjLFxuICAgICAgICAweDZmZDVjN2U3LCAweDU2ZTE0ZWM0LCAweDM2MmFiZmNlLCAweGRkYzZjODM3LCAweGQ3OWEzMjM0LFxuICAgICAgICAweDkyNjM4MjEyLCAweDY3MGVmYThlLCAweDQwNjAwMGUwLCAweDNhMzljZTM3LCAweGQzZmFmNWNmLFxuICAgICAgICAweGFiYzI3NzM3LCAweDVhYzUyZDFiLCAweDVjYjA2NzllLCAweDRmYTMzNzQyLCAweGQzODIyNzQwLFxuICAgICAgICAweDk5YmM5YmJlLCAweGQ1MTE4ZTlkLCAweGJmMGY3MzE1LCAweGQ2MmQxYzdlLCAweGM3MDBjNDdiLFxuICAgICAgICAweGI3OGMxYjZiLCAweDIxYTE5MDQ1LCAweGIyNmViMWJlLCAweDZhMzY2ZWI0LCAweDU3NDhhYjJmLFxuICAgICAgICAweGJjOTQ2ZTc5LCAweGM2YTM3NmQyLCAweDY1NDljMmM4LCAweDUzMGZmOGVlLCAweDQ2OGRkZTdkLFxuICAgICAgICAweGQ1NzMwYTFkLCAweDRjZDA0ZGM2LCAweDI5MzliYmRiLCAweGE5YmE0NjUwLCAweGFjOTUyNmU4LFxuICAgICAgICAweGJlNWVlMzA0LCAweGExZmFkNWYwLCAweDZhMmQ1MTlhLCAweDYzZWY4Y2UyLCAweDlhODZlZTIyLFxuICAgICAgICAweGMwODljMmI4LCAweDQzMjQyZWY2LCAweGE1MWUwM2FhLCAweDljZjJkMGE0LCAweDgzYzA2MWJhLFxuICAgICAgICAweDliZTk2YTRkLCAweDhmZTUxNTUwLCAweGJhNjQ1YmQ2LCAweDI4MjZhMmY5LCAweGE3M2EzYWUxLFxuICAgICAgICAweDRiYTk5NTg2LCAweGVmNTU2MmU5LCAweGM3MmZlZmQzLCAweGY3NTJmN2RhLCAweDNmMDQ2ZjY5LFxuICAgICAgICAweDc3ZmEwYTU5LCAweDgwZTRhOTE1LCAweDg3YjA4NjAxLCAweDliMDllNmFkLCAweDNiM2VlNTkzLFxuICAgICAgICAweGU5OTBmZDVhLCAweDllMzRkNzk3LCAweDJjZjBiN2Q5LCAweDAyMmI4YjUxLCAweDk2ZDVhYzNhLFxuICAgICAgICAweDAxN2RhNjdkLCAweGQxY2YzZWQ2LCAweDdjN2QyZDI4LCAweDFmOWYyNWNmLCAweGFkZjJiODliLFxuICAgICAgICAweDVhZDZiNDcyLCAweDVhODhmNTRjLCAweGUwMjlhYzcxLCAweGUwMTlhNWU2LCAweDQ3YjBhY2ZkLFxuICAgICAgICAweGVkOTNmYTliLCAweGU4ZDNjNDhkLCAweDI4M2I1N2NjLCAweGY4ZDU2NjI5LCAweDc5MTMyZTI4LFxuICAgICAgICAweDc4NWYwMTkxLCAweGVkNzU2MDU1LCAweGY3OTYwZTQ0LCAweGUzZDM1ZThjLCAweDE1MDU2ZGQ0LFxuICAgICAgICAweDg4ZjQ2ZGJhLCAweDAzYTE2MTI1LCAweDA1NjRmMGJkLCAweGMzZWI5ZTE1LCAweDNjOTA1N2EyLFxuICAgICAgICAweDk3MjcxYWVjLCAweGE5M2EwNzJhLCAweDFiM2Y2ZDliLCAweDFlNjMyMWY1LCAweGY1OWM2NmZiLFxuICAgICAgICAweDI2ZGNmMzE5LCAweDc1MzNkOTI4LCAweGIxNTVmZGY1LCAweDAzNTYzNDgyLCAweDhhYmEzY2JiLFxuICAgICAgICAweDI4NTE3NzExLCAweGMyMGFkOWY4LCAweGFiY2M1MTY3LCAweGNjYWQ5MjVmLCAweDRkZTgxNzUxLFxuICAgICAgICAweDM4MzBkYzhlLCAweDM3OWQ1ODYyLCAweDkzMjBmOTkxLCAweGVhN2E5MGMyLCAweGZiM2U3YmNlLFxuICAgICAgICAweDUxMjFjZTY0LCAweDc3NGZiZTMyLCAweGE4YjZlMzdlLCAweGMzMjkzZDQ2LCAweDQ4ZGU1MzY5LFxuICAgICAgICAweDY0MTNlNjgwLCAweGEyYWUwODEwLCAweGRkNmRiMjI0LCAweDY5ODUyZGZkLCAweDA5MDcyMTY2LFxuICAgICAgICAweGIzOWE0NjBhLCAweDY0NDVjMGRkLCAweDU4NmNkZWNmLCAweDFjMjBjOGFlLCAweDViYmVmN2RkLFxuICAgICAgICAweDFiNTg4ZDQwLCAweGNjZDIwMTdmLCAweDZiYjRlM2JiLCAweGRkYTI2YTdlLCAweDNhNTlmZjQ1LFxuICAgICAgICAweDNlMzUwYTQ0LCAweGJjYjRjZGQ1LCAweDcyZWFjZWE4LCAweGZhNjQ4NGJiLCAweDhkNjYxMmFlLFxuICAgICAgICAweGJmM2M2ZjQ3LCAweGQyOWJlNDYzLCAweDU0MmY1ZDllLCAweGFlYzI3NzFiLCAweGY2NGU2MzcwLFxuICAgICAgICAweDc0MGUwZDhkLCAweGU3NWIxMzU3LCAweGY4NzIxNjcxLCAweGFmNTM3ZDVkLCAweDQwNDBjYjA4LFxuICAgICAgICAweDRlYjRlMmNjLCAweDM0ZDI0NjZhLCAweDAxMTVhZjg0LCAweGUxYjAwNDI4LCAweDk1OTgzYTFkLFxuICAgICAgICAweDA2Yjg5ZmI0LCAweGNlNmVhMDQ4LCAweDZmM2YzYjgyLCAweDM1MjBhYjgyLCAweDAxMWExZDRiLFxuICAgICAgICAweDI3NzIyN2Y4LCAweDYxMTU2MGIxLCAweGU3OTMzZmRjLCAweGJiM2E3OTJiLCAweDM0NDUyNWJkLFxuICAgICAgICAweGEwODgzOWUxLCAweDUxY2U3OTRiLCAweDJmMzJjOWI3LCAweGEwMWZiYWM5LCAweGUwMWNjODdlLFxuICAgICAgICAweGJjYzdkMWY2LCAweGNmMDExMWMzLCAweGExZThhYWM3LCAweDFhOTA4NzQ5LCAweGQ0NGZiZDlhLFxuICAgICAgICAweGQwZGFkZWNiLCAweGQ1MGFkYTM4LCAweDAzMzljMzJhLCAweGM2OTEzNjY3LCAweDhkZjkzMTdjLFxuICAgICAgICAweGUwYjEyYjRmLCAweGY3OWU1OWI3LCAweDQzZjViYjNhLCAweGYyZDUxOWZmLCAweDI3ZDk0NTljLFxuICAgICAgICAweGJmOTcyMjJjLCAweDE1ZTZmYzJhLCAweDBmOTFmYzcxLCAweDliOTQxNTI1LCAweGZhZTU5MzYxLFxuICAgICAgICAweGNlYjY5Y2ViLCAweGMyYTg2NDU5LCAweDEyYmFhOGQxLCAweGI2YzEwNzVlLCAweGUzMDU2YTBjLFxuICAgICAgICAweDEwZDI1MDY1LCAweGNiMDNhNDQyLCAweGUwZWM2ZTBlLCAweDE2OThkYjNiLCAweDRjOThhMGJlLFxuICAgICAgICAweDMyNzhlOTY0LCAweDlmMWY5NTMyLCAweGUwZDM5MmRmLCAweGQzYTAzNDJiLCAweDg5NzFmMjFlLFxuICAgICAgICAweDFiMGE3NDQxLCAweDRiYTMzNDhjLCAweGM1YmU3MTIwLCAweGMzNzYzMmQ4LCAweGRmMzU5ZjhkLFxuICAgICAgICAweDliOTkyZjJlLCAweGU2MGI2ZjQ3LCAweDBmZTNmMTFkLCAweGU1NGNkYTU0LCAweDFlZGFkODkxLFxuICAgICAgICAweGNlNjI3OWNmLCAweGNkM2U3ZTZmLCAweDE2MThiMTY2LCAweGZkMmMxZDA1LCAweDg0OGZkMmM1LFxuICAgICAgICAweGY2ZmIyMjk5LCAweGY1MjNmMzU3LCAweGE2MzI3NjIzLCAweDkzYTgzNTMxLCAweDU2Y2NjZDAyLFxuICAgICAgICAweGFjZjA4MTYyLCAweDVhNzVlYmI1LCAweDZlMTYzNjk3LCAweDg4ZDI3M2NjLCAweGRlOTY2MjkyLFxuICAgICAgICAweDgxYjk0OWQwLCAweDRjNTA5MDFiLCAweDcxYzY1NjE0LCAweGU2YzZjN2JkLCAweDMyN2ExNDBhLFxuICAgICAgICAweDQ1ZTFkMDA2LCAweGMzZjI3YjlhLCAweGM5YWE1M2ZkLCAweDYyYTgwZjAwLCAweGJiMjViZmUyLFxuICAgICAgICAweDM1YmRkMmY2LCAweDcxMTI2OTA1LCAweGIyMDQwMjIyLCAweGI2Y2JjZjdjLCAweGNkNzY5YzJiLFxuICAgICAgICAweDUzMTEzZWMwLCAweDE2NDBlM2QzLCAweDM4YWJiZDYwLCAweDI1NDdhZGYwLCAweGJhMzgyMDljLFxuICAgICAgICAweGY3NDZjZTc2LCAweDc3YWZhMWM1LCAweDIwNzU2MDYwLCAweDg1Y2JmZTRlLCAweDhhZTg4ZGQ4LFxuICAgICAgICAweDdhYWFmOWIwLCAweDRjZjlhYTdlLCAweDE5NDhjMjVjLCAweDAyZmI4YThjLCAweDAxYzM2YWU0LFxuICAgICAgICAweGQ2ZWJlMWY5LCAweDkwZDRmODY5LCAweGE2NWNkZWEwLCAweDNmMDkyNTJkLCAweGMyMDhlNjlmLFxuICAgICAgICAweGI3NGU2MTMyLCAweGNlNzdlMjViLCAweDU3OGZkZmUzLCAweDNhYzM3MmU2XG4gICAgXTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheS48bnVtYmVyPn1cbiAgICAgKiBAY29uc3RcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICB2YXIgQ19PUklHID0gW1xuICAgICAgICAweDRmNzI3MDY4LCAweDY1NjE2ZTQyLCAweDY1Njg2ZjZjLCAweDY0NjU3MjUzLCAweDYzNzI3OTQ0LFxuICAgICAgICAweDZmNzU2Mjc0XG4gICAgXTtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IGxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZlxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IFBcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBTXG4gICAgICogQHJldHVybnMge0FycmF5LjxudW1iZXI+fVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIF9lbmNpcGhlcihsciwgb2ZmLCBQLCBTKSB7IC8vIFRoaXMgaXMgb3VyIGJvdHRsZW5lY2s6IDE3MTQvMTkwNSB0aWNrcyAvIDkwJSAtIHNlZSBwcm9maWxlLnR4dFxuICAgICAgICB2YXIgbixcbiAgICAgICAgICAgIGwgPSBscltvZmZdLFxuICAgICAgICAgICAgciA9IGxyW29mZiArIDFdO1xuXG4gICAgICAgIGwgXj0gUFswXTtcblxuICAgICAgICAvKlxuICAgICAgICBmb3IgKHZhciBpPTAsIGs9QkxPV0ZJU0hfTlVNX1JPVU5EUy0yOyBpPD1rOylcbiAgICAgICAgICAgIC8vIEZlaXN0ZWwgc3Vic3RpdHV0aW9uIG9uIGxlZnQgd29yZFxuICAgICAgICAgICAgbiAgPSBTW2wgPj4+IDI0XSxcbiAgICAgICAgICAgIG4gKz0gU1sweDEwMCB8ICgobCA+PiAxNikgJiAweGZmKV0sXG4gICAgICAgICAgICBuIF49IFNbMHgyMDAgfCAoKGwgPj4gOCkgJiAweGZmKV0sXG4gICAgICAgICAgICBuICs9IFNbMHgzMDAgfCAobCAmIDB4ZmYpXSxcbiAgICAgICAgICAgIHIgXj0gbiBeIFBbKytpXSxcbiAgICAgICAgICAgIC8vIEZlaXN0ZWwgc3Vic3RpdHV0aW9uIG9uIHJpZ2h0IHdvcmRcbiAgICAgICAgICAgIG4gID0gU1tyID4+PiAyNF0sXG4gICAgICAgICAgICBuICs9IFNbMHgxMDAgfCAoKHIgPj4gMTYpICYgMHhmZildLFxuICAgICAgICAgICAgbiBePSBTWzB4MjAwIHwgKChyID4+IDgpICYgMHhmZildLFxuICAgICAgICAgICAgbiArPSBTWzB4MzAwIHwgKHIgJiAweGZmKV0sXG4gICAgICAgICAgICBsIF49IG4gXiBQWysraV07XG4gICAgICAgICovXG5cbiAgICAgICAgLy9UaGUgZm9sbG93aW5nIGlzIGFuIHVucm9sbGVkIHZlcnNpb24gb2YgdGhlIGFib3ZlIGxvb3AuXG4gICAgICAgIC8vSXRlcmF0aW9uIDBcbiAgICAgICAgbiAgPSBTW2wgPj4+IDI0XTtcbiAgICAgICAgbiArPSBTWzB4MTAwIHwgKChsID4+IDE2KSAmIDB4ZmYpXTtcbiAgICAgICAgbiBePSBTWzB4MjAwIHwgKChsID4+IDgpICYgMHhmZildO1xuICAgICAgICBuICs9IFNbMHgzMDAgfCAobCAmIDB4ZmYpXTtcbiAgICAgICAgciBePSBuIF4gUFsxXTtcbiAgICAgICAgbiAgPSBTW3IgPj4+IDI0XTtcbiAgICAgICAgbiArPSBTWzB4MTAwIHwgKChyID4+IDE2KSAmIDB4ZmYpXTtcbiAgICAgICAgbiBePSBTWzB4MjAwIHwgKChyID4+IDgpICYgMHhmZildO1xuICAgICAgICBuICs9IFNbMHgzMDAgfCAociAmIDB4ZmYpXTtcbiAgICAgICAgbCBePSBuIF4gUFsyXTtcbiAgICAgICAgLy9JdGVyYXRpb24gMVxuICAgICAgICBuICA9IFNbbCA+Pj4gMjRdO1xuICAgICAgICBuICs9IFNbMHgxMDAgfCAoKGwgPj4gMTYpICYgMHhmZildO1xuICAgICAgICBuIF49IFNbMHgyMDAgfCAoKGwgPj4gOCkgJiAweGZmKV07XG4gICAgICAgIG4gKz0gU1sweDMwMCB8IChsICYgMHhmZildO1xuICAgICAgICByIF49IG4gXiBQWzNdO1xuICAgICAgICBuICA9IFNbciA+Pj4gMjRdO1xuICAgICAgICBuICs9IFNbMHgxMDAgfCAoKHIgPj4gMTYpICYgMHhmZildO1xuICAgICAgICBuIF49IFNbMHgyMDAgfCAoKHIgPj4gOCkgJiAweGZmKV07XG4gICAgICAgIG4gKz0gU1sweDMwMCB8IChyICYgMHhmZildO1xuICAgICAgICBsIF49IG4gXiBQWzRdO1xuICAgICAgICAvL0l0ZXJhdGlvbiAyXG4gICAgICAgIG4gID0gU1tsID4+PiAyNF07XG4gICAgICAgIG4gKz0gU1sweDEwMCB8ICgobCA+PiAxNikgJiAweGZmKV07XG4gICAgICAgIG4gXj0gU1sweDIwMCB8ICgobCA+PiA4KSAmIDB4ZmYpXTtcbiAgICAgICAgbiArPSBTWzB4MzAwIHwgKGwgJiAweGZmKV07XG4gICAgICAgIHIgXj0gbiBeIFBbNV07XG4gICAgICAgIG4gID0gU1tyID4+PiAyNF07XG4gICAgICAgIG4gKz0gU1sweDEwMCB8ICgociA+PiAxNikgJiAweGZmKV07XG4gICAgICAgIG4gXj0gU1sweDIwMCB8ICgociA+PiA4KSAmIDB4ZmYpXTtcbiAgICAgICAgbiArPSBTWzB4MzAwIHwgKHIgJiAweGZmKV07XG4gICAgICAgIGwgXj0gbiBeIFBbNl07XG4gICAgICAgIC8vSXRlcmF0aW9uIDNcbiAgICAgICAgbiAgPSBTW2wgPj4+IDI0XTtcbiAgICAgICAgbiArPSBTWzB4MTAwIHwgKChsID4+IDE2KSAmIDB4ZmYpXTtcbiAgICAgICAgbiBePSBTWzB4MjAwIHwgKChsID4+IDgpICYgMHhmZildO1xuICAgICAgICBuICs9IFNbMHgzMDAgfCAobCAmIDB4ZmYpXTtcbiAgICAgICAgciBePSBuIF4gUFs3XTtcbiAgICAgICAgbiAgPSBTW3IgPj4+IDI0XTtcbiAgICAgICAgbiArPSBTWzB4MTAwIHwgKChyID4+IDE2KSAmIDB4ZmYpXTtcbiAgICAgICAgbiBePSBTWzB4MjAwIHwgKChyID4+IDgpICYgMHhmZildO1xuICAgICAgICBuICs9IFNbMHgzMDAgfCAociAmIDB4ZmYpXTtcbiAgICAgICAgbCBePSBuIF4gUFs4XTtcbiAgICAgICAgLy9JdGVyYXRpb24gNFxuICAgICAgICBuICA9IFNbbCA+Pj4gMjRdO1xuICAgICAgICBuICs9IFNbMHgxMDAgfCAoKGwgPj4gMTYpICYgMHhmZildO1xuICAgICAgICBuIF49IFNbMHgyMDAgfCAoKGwgPj4gOCkgJiAweGZmKV07XG4gICAgICAgIG4gKz0gU1sweDMwMCB8IChsICYgMHhmZildO1xuICAgICAgICByIF49IG4gXiBQWzldO1xuICAgICAgICBuICA9IFNbciA+Pj4gMjRdO1xuICAgICAgICBuICs9IFNbMHgxMDAgfCAoKHIgPj4gMTYpICYgMHhmZildO1xuICAgICAgICBuIF49IFNbMHgyMDAgfCAoKHIgPj4gOCkgJiAweGZmKV07XG4gICAgICAgIG4gKz0gU1sweDMwMCB8IChyICYgMHhmZildO1xuICAgICAgICBsIF49IG4gXiBQWzEwXTtcbiAgICAgICAgLy9JdGVyYXRpb24gNVxuICAgICAgICBuICA9IFNbbCA+Pj4gMjRdO1xuICAgICAgICBuICs9IFNbMHgxMDAgfCAoKGwgPj4gMTYpICYgMHhmZildO1xuICAgICAgICBuIF49IFNbMHgyMDAgfCAoKGwgPj4gOCkgJiAweGZmKV07XG4gICAgICAgIG4gKz0gU1sweDMwMCB8IChsICYgMHhmZildO1xuICAgICAgICByIF49IG4gXiBQWzExXTtcbiAgICAgICAgbiAgPSBTW3IgPj4+IDI0XTtcbiAgICAgICAgbiArPSBTWzB4MTAwIHwgKChyID4+IDE2KSAmIDB4ZmYpXTtcbiAgICAgICAgbiBePSBTWzB4MjAwIHwgKChyID4+IDgpICYgMHhmZildO1xuICAgICAgICBuICs9IFNbMHgzMDAgfCAociAmIDB4ZmYpXTtcbiAgICAgICAgbCBePSBuIF4gUFsxMl07XG4gICAgICAgIC8vSXRlcmF0aW9uIDZcbiAgICAgICAgbiAgPSBTW2wgPj4+IDI0XTtcbiAgICAgICAgbiArPSBTWzB4MTAwIHwgKChsID4+IDE2KSAmIDB4ZmYpXTtcbiAgICAgICAgbiBePSBTWzB4MjAwIHwgKChsID4+IDgpICYgMHhmZildO1xuICAgICAgICBuICs9IFNbMHgzMDAgfCAobCAmIDB4ZmYpXTtcbiAgICAgICAgciBePSBuIF4gUFsxM107XG4gICAgICAgIG4gID0gU1tyID4+PiAyNF07XG4gICAgICAgIG4gKz0gU1sweDEwMCB8ICgociA+PiAxNikgJiAweGZmKV07XG4gICAgICAgIG4gXj0gU1sweDIwMCB8ICgociA+PiA4KSAmIDB4ZmYpXTtcbiAgICAgICAgbiArPSBTWzB4MzAwIHwgKHIgJiAweGZmKV07XG4gICAgICAgIGwgXj0gbiBeIFBbMTRdO1xuICAgICAgICAvL0l0ZXJhdGlvbiA3XG4gICAgICAgIG4gID0gU1tsID4+PiAyNF07XG4gICAgICAgIG4gKz0gU1sweDEwMCB8ICgobCA+PiAxNikgJiAweGZmKV07XG4gICAgICAgIG4gXj0gU1sweDIwMCB8ICgobCA+PiA4KSAmIDB4ZmYpXTtcbiAgICAgICAgbiArPSBTWzB4MzAwIHwgKGwgJiAweGZmKV07XG4gICAgICAgIHIgXj0gbiBeIFBbMTVdO1xuICAgICAgICBuICA9IFNbciA+Pj4gMjRdO1xuICAgICAgICBuICs9IFNbMHgxMDAgfCAoKHIgPj4gMTYpICYgMHhmZildO1xuICAgICAgICBuIF49IFNbMHgyMDAgfCAoKHIgPj4gOCkgJiAweGZmKV07XG4gICAgICAgIG4gKz0gU1sweDMwMCB8IChyICYgMHhmZildO1xuICAgICAgICBsIF49IG4gXiBQWzE2XTtcblxuICAgICAgICBscltvZmZdID0gciBeIFBbQkxPV0ZJU0hfTlVNX1JPVU5EUyArIDFdO1xuICAgICAgICBscltvZmYgKyAxXSA9IGw7XG4gICAgICAgIHJldHVybiBscjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBkYXRhXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnBcbiAgICAgKiBAcmV0dXJucyB7e2tleTogbnVtYmVyLCBvZmZwOiBudW1iZXJ9fVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIF9zdHJlYW10b3dvcmQoZGF0YSwgb2ZmcCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgd29yZCA9IDA7IGkgPCA0OyArK2kpXG4gICAgICAgICAgICB3b3JkID0gKHdvcmQgPDwgOCkgfCAoZGF0YVtvZmZwXSAmIDB4ZmYpLFxuICAgICAgICAgICAgb2ZmcCA9IChvZmZwICsgMSkgJSBkYXRhLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHsga2V5OiB3b3JkLCBvZmZwOiBvZmZwIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0ga2V5XG4gICAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gUFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IFNcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBfa2V5KGtleSwgUCwgUykge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMCxcbiAgICAgICAgICAgIGxyID0gWzAsIDBdLFxuICAgICAgICAgICAgcGxlbiA9IFAubGVuZ3RoLFxuICAgICAgICAgICAgc2xlbiA9IFMubGVuZ3RoLFxuICAgICAgICAgICAgc3c7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGxlbjsgaSsrKVxuICAgICAgICAgICAgc3cgPSBfc3RyZWFtdG93b3JkKGtleSwgb2Zmc2V0KSxcbiAgICAgICAgICAgIG9mZnNldCA9IHN3Lm9mZnAsXG4gICAgICAgICAgICBQW2ldID0gUFtpXSBeIHN3LmtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBsZW47IGkgKz0gMilcbiAgICAgICAgICAgIGxyID0gX2VuY2lwaGVyKGxyLCAwLCBQLCBTKSxcbiAgICAgICAgICAgIFBbaV0gPSBsclswXSxcbiAgICAgICAgICAgIFBbaSArIDFdID0gbHJbMV07XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzbGVuOyBpICs9IDIpXG4gICAgICAgICAgICBsciA9IF9lbmNpcGhlcihsciwgMCwgUCwgUyksXG4gICAgICAgICAgICBTW2ldID0gbHJbMF0sXG4gICAgICAgICAgICBTW2kgKyAxXSA9IGxyWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4cGVuc2l2ZSBrZXkgc2NoZWR1bGUgQmxvd2Zpc2guXG4gICAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gZGF0YVxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IGtleVxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IFBcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBTXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gX2Vrc2tleShkYXRhLCBrZXksIFAsIFMpIHtcbiAgICAgICAgdmFyIG9mZnAgPSAwLFxuICAgICAgICAgICAgbHIgPSBbMCwgMF0sXG4gICAgICAgICAgICBwbGVuID0gUC5sZW5ndGgsXG4gICAgICAgICAgICBzbGVuID0gUy5sZW5ndGgsXG4gICAgICAgICAgICBzdztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGVuOyBpKyspXG4gICAgICAgICAgICBzdyA9IF9zdHJlYW10b3dvcmQoa2V5LCBvZmZwKSxcbiAgICAgICAgICAgIG9mZnAgPSBzdy5vZmZwLFxuICAgICAgICAgICAgUFtpXSA9IFBbaV0gXiBzdy5rZXk7XG4gICAgICAgIG9mZnAgPSAwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGxlbjsgaSArPSAyKVxuICAgICAgICAgICAgc3cgPSBfc3RyZWFtdG93b3JkKGRhdGEsIG9mZnApLFxuICAgICAgICAgICAgb2ZmcCA9IHN3Lm9mZnAsXG4gICAgICAgICAgICBsclswXSBePSBzdy5rZXksXG4gICAgICAgICAgICBzdyA9IF9zdHJlYW10b3dvcmQoZGF0YSwgb2ZmcCksXG4gICAgICAgICAgICBvZmZwID0gc3cub2ZmcCxcbiAgICAgICAgICAgIGxyWzFdIF49IHN3LmtleSxcbiAgICAgICAgICAgIGxyID0gX2VuY2lwaGVyKGxyLCAwLCBQLCBTKSxcbiAgICAgICAgICAgIFBbaV0gPSBsclswXSxcbiAgICAgICAgICAgIFBbaSArIDFdID0gbHJbMV07XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzbGVuOyBpICs9IDIpXG4gICAgICAgICAgICBzdyA9IF9zdHJlYW10b3dvcmQoZGF0YSwgb2ZmcCksXG4gICAgICAgICAgICBvZmZwID0gc3cub2ZmcCxcbiAgICAgICAgICAgIGxyWzBdIF49IHN3LmtleSxcbiAgICAgICAgICAgIHN3ID0gX3N0cmVhbXRvd29yZChkYXRhLCBvZmZwKSxcbiAgICAgICAgICAgIG9mZnAgPSBzdy5vZmZwLFxuICAgICAgICAgICAgbHJbMV0gXj0gc3cua2V5LFxuICAgICAgICAgICAgbHIgPSBfZW5jaXBoZXIobHIsIDAsIFAsIFMpLFxuICAgICAgICAgICAgU1tpXSA9IGxyWzBdLFxuICAgICAgICAgICAgU1tpICsgMV0gPSBsclsxXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbHkgY3J5cHRzIGEgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IGIgQnl0ZXMgdG8gY3J5cHRcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBzYWx0IFNhbHQgYnl0ZXMgdG8gdXNlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJvdW5kcyBOdW1iZXIgb2Ygcm91bmRzXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihFcnJvciwgQXJyYXkuPG51bWJlcj49KT19IGNhbGxiYWNrIENhbGxiYWNrIHJlY2VpdmluZyB0aGUgZXJyb3IsIGlmIGFueSwgYW5kIHRoZSByZXN1bHRpbmcgYnl0ZXMuIElmXG4gICAgICogIG9taXR0ZWQsIHRoZSBvcGVyYXRpb24gd2lsbCBiZSBwZXJmb3JtZWQgc3luY2hyb25vdXNseS5cbiAgICAgKiAgQHBhcmFtIHtmdW5jdGlvbihudW1iZXIpPX0gcHJvZ3Jlc3NDYWxsYmFjayBDYWxsYmFjayBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCBwcm9ncmVzc1xuICAgICAqIEByZXR1cm5zIHshQXJyYXkuPG51bWJlcj58dW5kZWZpbmVkfSBSZXN1bHRpbmcgYnl0ZXMgaWYgY2FsbGJhY2sgaGFzIGJlZW4gb21pdHRlZCwgb3RoZXJ3aXNlIGB1bmRlZmluZWRgXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gX2NyeXB0KGIsIHNhbHQsIHJvdW5kcywgY2FsbGJhY2ssIHByb2dyZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGNkYXRhID0gQ19PUklHLnNsaWNlKCksXG4gICAgICAgICAgICBjbGVuID0gY2RhdGEubGVuZ3RoLFxuICAgICAgICAgICAgZXJyO1xuXG4gICAgICAgIC8vIFZhbGlkYXRlXG4gICAgICAgIGlmIChyb3VuZHMgPCA0IHx8IHJvdW5kcyA+IDMxKSB7XG4gICAgICAgICAgICBlcnIgPSBFcnJvcihcIklsbGVnYWwgbnVtYmVyIG9mIHJvdW5kcyAoNC0zMSk6IFwiK3JvdW5kcyk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBuZXh0VGljayhjYWxsYmFjay5iaW5kKHRoaXMsIGVycikpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2FsdC5sZW5ndGggIT09IEJDUllQVF9TQUxUX0xFTikge1xuICAgICAgICAgICAgZXJyID1FcnJvcihcIklsbGVnYWwgc2FsdCBsZW5ndGg6IFwiK3NhbHQubGVuZ3RoK1wiICE9IFwiK0JDUllQVF9TQUxUX0xFTik7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBuZXh0VGljayhjYWxsYmFjay5iaW5kKHRoaXMsIGVycikpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICByb3VuZHMgPSAoMSA8PCByb3VuZHMpID4+PiAwO1xuXG4gICAgICAgIHZhciBQLCBTLCBpID0gMCwgajtcblxuICAgICAgICAvL1VzZSB0eXBlZCBhcnJheXMgd2hlbiBhdmFpbGFibGUgLSBodWdlIHNwZWVkdXAhXG4gICAgICAgIGlmIChJbnQzMkFycmF5KSB7XG4gICAgICAgICAgICBQID0gbmV3IEludDMyQXJyYXkoUF9PUklHKTtcbiAgICAgICAgICAgIFMgPSBuZXcgSW50MzJBcnJheShTX09SSUcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgUCA9IFBfT1JJRy5zbGljZSgpO1xuICAgICAgICAgICAgUyA9IFNfT1JJRy5zbGljZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgX2Vrc2tleShzYWx0LCBiLCBQLCBTKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsY3VhbHRlcyB0aGUgbmV4dCByb3VuZC5cbiAgICAgICAgICogQHJldHVybnMge0FycmF5LjxudW1iZXI+fHVuZGVmaW5lZH0gUmVzdWx0aW5nIGFycmF5IGlmIGNhbGxiYWNrIGhhcyBiZWVuIG9taXR0ZWQsIG90aGVyd2lzZSBgdW5kZWZpbmVkYFxuICAgICAgICAgKiBAaW5uZXJcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgICBpZiAocHJvZ3Jlc3NDYWxsYmFjaylcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0NhbGxiYWNrKGkgLyByb3VuZHMpO1xuICAgICAgICAgICAgaWYgKGkgPCByb3VuZHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIGZvciAoOyBpIDwgcm91bmRzOykge1xuICAgICAgICAgICAgICAgICAgICBpID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgIF9rZXkoYiwgUCwgUyk7XG4gICAgICAgICAgICAgICAgICAgIF9rZXkoc2FsdCwgUCwgUyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChEYXRlLm5vdygpIC0gc3RhcnQgPiBNQVhfRVhFQ1VUSU9OX1RJTUUpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA2NDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgKGNsZW4gPj4gMSk7IGorKylcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lbmNpcGhlcihjZGF0YSwgaiA8PCAxLCBQLCBTKTtcbiAgICAgICAgICAgICAgICB2YXIgcmV0ID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNsZW47IGkrKylcbiAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2goKChjZGF0YVtpXSA+PiAyNCkgJiAweGZmKSA+Pj4gMCksXG4gICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKCgoY2RhdGFbaV0gPj4gMTYpICYgMHhmZikgPj4+IDApLFxuICAgICAgICAgICAgICAgICAgICByZXQucHVzaCgoKGNkYXRhW2ldID4+IDgpICYgMHhmZikgPj4+IDApLFxuICAgICAgICAgICAgICAgICAgICByZXQucHVzaCgoY2RhdGFbaV0gJiAweGZmKSA+Pj4gMCk7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJldCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYWxsYmFjaylcbiAgICAgICAgICAgICAgICBuZXh0VGljayhuZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFzeW5jXG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBuZXh0KCk7XG5cbiAgICAgICAgICAgIC8vIFN5bmNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZXM7XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSlcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHJlcyA9IG5leHQoKSkgIT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzIHx8IFtdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWxseSBoYXNoZXMgYSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHMgU3RyaW5nIHRvIGhhc2hcbiAgICAgKiBAcGFyYW0gez9zdHJpbmd9IHNhbHQgU2FsdCB0byB1c2UsIGFjdHVhbGx5IG5ldmVyIG51bGxcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEVycm9yLCBzdHJpbmc9KT19IGNhbGxiYWNrIENhbGxiYWNrIHJlY2VpdmluZyB0aGUgZXJyb3IsIGlmIGFueSwgYW5kIHRoZSByZXN1bHRpbmcgaGFzaC4gSWYgb21pdHRlZCxcbiAgICAgKiAgaGFzaGluZyBpcyBwZXJvcm1lZCBzeW5jaHJvbm91c2x5LlxuICAgICAqICBAcGFyYW0ge2Z1bmN0aW9uKG51bWJlcik9fSBwcm9ncmVzc0NhbGxiYWNrIENhbGxiYWNrIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHByb2dyZXNzXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJlc3VsdGluZyBoYXNoIGlmIGNhbGxiYWNrIGhhcyBiZWVuIG9taXR0ZWQsIG90aGVyd2lzZSBgdW5kZWZpbmVkYFxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIF9oYXNoKHMsIHNhbHQsIGNhbGxiYWNrLCBwcm9ncmVzc0NhbGxiYWNrKSB7XG4gICAgICAgIHZhciBlcnI7XG4gICAgICAgIGlmICh0eXBlb2YgcyAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIHNhbHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBlcnIgPSBFcnJvcihcIkludmFsaWQgc3RyaW5nIC8gc2FsdDogTm90IGEgc3RyaW5nXCIpO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgbmV4dFRpY2soY2FsbGJhY2suYmluZCh0aGlzLCBlcnIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVmFsaWRhdGUgdGhlIHNhbHRcbiAgICAgICAgdmFyIG1pbm9yLCBvZmZzZXQ7XG4gICAgICAgIGlmIChzYWx0LmNoYXJBdCgwKSAhPT0gJyQnIHx8IHNhbHQuY2hhckF0KDEpICE9PSAnMicpIHtcbiAgICAgICAgICAgIGVyciA9IEVycm9yKFwiSW52YWxpZCBzYWx0IHZlcnNpb246IFwiK3NhbHQuc3Vic3RyaW5nKDAsMikpO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgbmV4dFRpY2soY2FsbGJhY2suYmluZCh0aGlzLCBlcnIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzYWx0LmNoYXJBdCgyKSA9PT0gJyQnKVxuICAgICAgICAgICAgbWlub3IgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDApLFxuICAgICAgICAgICAgb2Zmc2V0ID0gMztcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtaW5vciA9IHNhbHQuY2hhckF0KDIpO1xuICAgICAgICAgICAgaWYgKChtaW5vciAhPT0gJ2EnICYmIG1pbm9yICE9PSAnYicgJiYgbWlub3IgIT09ICd5JykgfHwgc2FsdC5jaGFyQXQoMykgIT09ICckJykge1xuICAgICAgICAgICAgICAgIGVyciA9IEVycm9yKFwiSW52YWxpZCBzYWx0IHJldmlzaW9uOiBcIitzYWx0LnN1YnN0cmluZygyLDQpKTtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dFRpY2soY2FsbGJhY2suYmluZCh0aGlzLCBlcnIpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvZmZzZXQgPSA0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRXh0cmFjdCBudW1iZXIgb2Ygcm91bmRzXG4gICAgICAgIGlmIChzYWx0LmNoYXJBdChvZmZzZXQgKyAyKSA+ICckJykge1xuICAgICAgICAgICAgZXJyID0gRXJyb3IoXCJNaXNzaW5nIHNhbHQgcm91bmRzXCIpO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgbmV4dFRpY2soY2FsbGJhY2suYmluZCh0aGlzLCBlcnIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHIxID0gcGFyc2VJbnQoc2FsdC5zdWJzdHJpbmcob2Zmc2V0LCBvZmZzZXQgKyAxKSwgMTApICogMTAsXG4gICAgICAgICAgICByMiA9IHBhcnNlSW50KHNhbHQuc3Vic3RyaW5nKG9mZnNldCArIDEsIG9mZnNldCArIDIpLCAxMCksXG4gICAgICAgICAgICByb3VuZHMgPSByMSArIHIyLFxuICAgICAgICAgICAgcmVhbF9zYWx0ID0gc2FsdC5zdWJzdHJpbmcob2Zmc2V0ICsgMywgb2Zmc2V0ICsgMjUpO1xuICAgICAgICBzICs9IG1pbm9yID49ICdhJyA/IFwiXFx4MDBcIiA6IFwiXCI7XG5cbiAgICAgICAgdmFyIHBhc3N3b3JkYiA9IHN0cmluZ1RvQnl0ZXMocyksXG4gICAgICAgICAgICBzYWx0YiA9IGJhc2U2NF9kZWNvZGUocmVhbF9zYWx0LCBCQ1JZUFRfU0FMVF9MRU4pO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaW5pc2hlcyBoYXNoaW5nLlxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBieXRlcyBCeXRlIGFycmF5XG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICAgICAqIEBpbm5lclxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZmluaXNoKGJ5dGVzKSB7XG4gICAgICAgICAgICB2YXIgcmVzID0gW107XG4gICAgICAgICAgICByZXMucHVzaChcIiQyXCIpO1xuICAgICAgICAgICAgaWYgKG1pbm9yID49ICdhJylcbiAgICAgICAgICAgICAgICByZXMucHVzaChtaW5vcik7XG4gICAgICAgICAgICByZXMucHVzaChcIiRcIik7XG4gICAgICAgICAgICBpZiAocm91bmRzIDwgMTApXG4gICAgICAgICAgICAgICAgcmVzLnB1c2goXCIwXCIpO1xuICAgICAgICAgICAgcmVzLnB1c2gocm91bmRzLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgcmVzLnB1c2goXCIkXCIpO1xuICAgICAgICAgICAgcmVzLnB1c2goYmFzZTY0X2VuY29kZShzYWx0Yiwgc2FsdGIubGVuZ3RoKSk7XG4gICAgICAgICAgICByZXMucHVzaChiYXNlNjRfZW5jb2RlKGJ5dGVzLCBDX09SSUcubGVuZ3RoICogNCAtIDEpKTtcbiAgICAgICAgICAgIHJldHVybiByZXMuam9pbignJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTeW5jXG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICByZXR1cm4gZmluaXNoKF9jcnlwdChwYXNzd29yZGIsIHNhbHRiLCByb3VuZHMpKTtcblxuICAgICAgICAvLyBBc3luY1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9jcnlwdChwYXNzd29yZGIsIHNhbHRiLCByb3VuZHMsIGZ1bmN0aW9uKGVyciwgYnl0ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZmluaXNoKGJ5dGVzKSk7XG4gICAgICAgICAgICB9LCBwcm9ncmVzc0NhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgYSBieXRlIGFycmF5IHRvIGJhc2U2NCB3aXRoIHVwIHRvIGxlbiBieXRlcyBvZiBpbnB1dCwgdXNpbmcgdGhlIGN1c3RvbSBiY3J5cHQgYWxwaGFiZXQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHshQXJyYXkuPG51bWJlcj59IGIgQnl0ZSBhcnJheVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gTWF4aW11bSBpbnB1dCBsZW5ndGhcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGJjcnlwdC5lbmNvZGVCYXNlNjQgPSBiYXNlNjRfZW5jb2RlO1xuXG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZyB0byB1cCB0byBsZW4gYnl0ZXMgb2Ygb3V0cHV0LCB1c2luZyB0aGUgY3VzdG9tIGJjcnlwdCBhbHBoYWJldC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcyBTdHJpbmcgdG8gZGVjb2RlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbiBNYXhpbXVtIG91dHB1dCBsZW5ndGhcbiAgICAgKiBAcmV0dXJucyB7IUFycmF5LjxudW1iZXI+fVxuICAgICAqL1xuICAgIGJjcnlwdC5kZWNvZGVCYXNlNjQgPSBiYXNlNjRfZGVjb2RlO1xuXG4gICAgcmV0dXJuIGJjcnlwdDtcbn0pKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/bcryptjs-react/dist/bcrypt.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/bcryptjs-react/index.js":
/*!**********************************************!*\
  !*** ./node_modules/bcryptjs-react/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2012 Nevins Bartolomeo <nevins.bartolomeo@gmail.com>\n Copyright (c) 2012 Shane Girish <shaneGirish@gmail.com>\n Copyright (c) 2013 Daniel Wirtz <dcode@dcode.io>\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n 1. Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n 3. The name of the author may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nmodule.exports = __webpack_require__(/*! ./dist/bcrypt.js */ \"(action-browser)/./node_modules/bcryptjs-react/dist/bcrypt.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9iY3J5cHRqcy1yZWFjdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThEO0FBQzlELG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2SEFBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91c2MtYXBwLy4vbm9kZV9tb2R1bGVzL2JjcnlwdGpzLXJlYWN0L2luZGV4LmpzPzg4N2YiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiBDb3B5cmlnaHQgKGMpIDIwMTIgTmV2aW5zIEJhcnRvbG9tZW8gPG5ldmlucy5iYXJ0b2xvbWVvQGdtYWlsLmNvbT5cbiBDb3B5cmlnaHQgKGMpIDIwMTIgU2hhbmUgR2lyaXNoIDxzaGFuZUdpcmlzaEBnbWFpbC5jb20+XG4gQ29weXJpZ2h0IChjKSAyMDEzIERhbmllbCBXaXJ0eiA8ZGNvZGVAZGNvZGUuaW8+XG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnNcbiBhcmUgbWV0OlxuIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gMy4gVGhlIG5hbWUgb2YgdGhlIGF1dGhvciBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cbiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBBVVRIT1IgYGBBUyBJUycnIEFORCBBTlkgRVhQUkVTUyBPUlxuIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVNcbiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELlxuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcbiBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVRcbiBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsXG4gREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZXG4gVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRlxuIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9kaXN0L2JjcnlwdC5qc1wiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/bcryptjs-react/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/bcryptjs-react/index.js":
/*!**********************************************!*\
  !*** ./node_modules/bcryptjs-react/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2012 Nevins Bartolomeo <nevins.bartolomeo@gmail.com>\n Copyright (c) 2012 Shane Girish <shaneGirish@gmail.com>\n Copyright (c) 2013 Daniel Wirtz <dcode@dcode.io>\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n 1. Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n 3. The name of the author may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nmodule.exports = __webpack_require__(/*! ./dist/bcrypt.js */ \"(rsc)/./node_modules/bcryptjs-react/dist/bcrypt.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmNyeXB0anMtcmVhY3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RDtBQUM5RCxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0hBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXNjLWFwcC8uL25vZGVfbW9kdWxlcy9iY3J5cHRqcy1yZWFjdC9pbmRleC5qcz84ODM3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gQ29weXJpZ2h0IChjKSAyMDEyIE5ldmlucyBCYXJ0b2xvbWVvIDxuZXZpbnMuYmFydG9sb21lb0BnbWFpbC5jb20+XG4gQ29weXJpZ2h0IChjKSAyMDEyIFNoYW5lIEdpcmlzaCA8c2hhbmVHaXJpc2hAZ21haWwuY29tPlxuIENvcHlyaWdodCAoYykgMjAxMyBEYW5pZWwgV2lydHogPGRjb2RlQGRjb2RlLmlvPlxuXG4gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zXG4gYXJlIG1ldDpcbiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuIDMuIFRoZSBuYW1lIG9mIHRoZSBhdXRob3IgbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG4gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQVVUSE9SIGBgQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1MgT1JcbiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC5cbiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsXG4gSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUXG4gTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLFxuIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWVxuIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0ZcbiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vZGlzdC9iY3J5cHQuanNcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/bcryptjs-react/index.js\n");

/***/ })

};
;